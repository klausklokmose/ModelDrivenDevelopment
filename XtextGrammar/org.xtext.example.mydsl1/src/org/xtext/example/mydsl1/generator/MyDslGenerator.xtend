/*
 * generated by Xtext
 */
package org.xtext.example.mydsl1.generator

import featureModel.BinaryOperation
import featureModel.BinaryOperator
import featureModel.Expression
import featureModel.Feature
import featureModel.Group
import featureModel.GroupedFeature
import featureModel.Identifier
import featureModel.Model
import featureModel.NULL
import featureModel.Number
import featureModel.SimpleType
import featureModel.SolitaryFeature
import featureModel.SolitaryType
import featureModel.UnaryOperation
import featureModel.UnaryOperator
import java.util.ArrayList
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

class MyDslGenerator implements IGenerator {
	
	val javaFields = new ArrayList<String>();
	val javaRequired = new ArrayList<String>();
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var m = resource.contents.head as Model
		for(Feature root : m.rootFeature)
		{
			fsa.generateFile(root.name+'.php', toHTML(root))
			fsa.generateFile(root.name+'.java', toJava(root))
		}
	}
	
	def toJava(Feature it)'''
		«javaFields.clear»«««	hack
		«javaRequired.clear»
		import java.awt.*;
		import java.awt.event.*;
		import javax.swing.*;
		import java.util.ArrayList;
		import javax.swing.text.JTextComponent;
		
		public class «name» extends JFrame {
		  
		    public «name»() {
		        initComponents();
		    }
		
		    @SuppressWarnings("unchecked")                        
		    private void initComponents() {
		        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		        setTitle("«name»");
		        getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
		
				InputVerifier intVerifier = new InputVerifier() {
					public boolean verify(JComponent input) {
						final JTextComponent source = (JTextComponent)input;
							if(!(source.getText().equals("") || validateInteger(source.getText()))){
								JOptionPane.showMessageDialog(null, "Error: must be an Integer", "Error Message", JOptionPane.ERROR_MESSAGE);
							return false;
						}else {
							return true;
						}
					}
		        };
				InputVerifier doubleVerifier = new InputVerifier() {
					public boolean verify(JComponent input) {
						final JTextComponent source = (JTextComponent)input;
						if(!(source.getText().equals("") || validateDouble(source.getText()))){
							JOptionPane.showMessageDialog(null, "Error: must be Double", "Error Massage", JOptionPane.ERROR_MESSAGE);
							return false;
						}else {
							return true;
						}
					}
				};
				
		//Features of the root feature
				«name.toFirstLower.replaceAll(" ", "")»Panel = createPanel("«name»");
				«addToJavaFields("JPanel", name.toFirstLower+"Panel")»
				«getFeatureJava(it, name)»
				getContentPane().add(«name.toFirstLower»Panel);
		
		        JPanel submitPanel = new JPanel();
		        submitPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
		        submitButton = new JButton();
		        submitButton.setText("Submit");
		        submitButton.addActionListener(new ActionListener() {
		            public void actionPerformed(ActionEvent evt) {
		                submitButtonActionPerformed(evt);
		            }
		        });
		        
		        JScrollPane scrollPane = new JScrollPane(«name.toFirstLower»Panel);
		        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
				getContentPane().add(scrollPane);
		
		        submitPanel.add(submitButton);
		        getContentPane().add(submitPanel);
				setMinimumSize(new Dimension(400, 700));
«««		        pack();
		    }
		
		    private void submitButtonActionPerformed(ActionEvent evt) {
		        // TODO add your handling code here:
«««		        put constraint checking call
				String check = check();
				if(check.length() == 0){
					String m = "Congratulations!\n\nDetails of new «name»:";
					«FOR c : javaFields»
						«val field = c.split(" ")»
						«IF c.contains("JTextField")»
							m += "\n«field.get(1).trim().split("Field").get(0)»: "+ «field.get(1)».getText();
						«ELSEIF c.contains("JComboBox")»
							m += "\n«field.get(1).trim().split("Select").get(0)»: "+ «field.get(1)».getSelectedItem();
						«ELSEIF c.contains("JCheckBox")»
							if(«field.get(1)».isSelected()){
								m += "\n«field.get(1).trim().split("Option").get(0)»: selected";
							}
							
						«ENDIF»
					«ENDFOR»
					JTextArea ta = new JTextArea(30, 30);
					ta.setText(m);
					ta.setWrapStyleWord(true);
					ta.setLineWrap(true);
					ta.setCaretPosition(0);
					ta.setEditable(false);
			        JOptionPane.showMessageDialog(null, new JScrollPane(ta), "RESULT", JOptionPane.INFORMATION_MESSAGE);
				}else{
					JOptionPane.showMessageDialog(null, check);
				}
		    }   
		    
		    private JPanel createPanel(String title){
		        JPanel resultPanel = new JPanel(); 
		        resultPanel.setBorder(BorderFactory.createTitledBorder(title));
		        resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.Y_AXIS));
		        return resultPanel;
		    }
		
		    public static void main(String args[]) {
		        try {
		            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		                if ("Nimbus".equals(info.getName())) {
		                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		                    break;
		                }
		            }
		        } catch (Exception ex) {
		            java.util.logging.Logger.getLogger(«name».class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		        }
		
		        /* Create and display the form */
		        java.awt.EventQueue.invokeLater(new Runnable() {
		            public void run() {
		                new «name»().setVisible(true);
		            }
		        });
		    }
		    
			private String check() {
				String message = "";
				«FOR c : it.constraints»
				//constraint
				if(!«getVariableJavaCode(c, name.toFirstLower)»){
					message += "Error: «getConstraintsText(c, name)»\n";
				}
				«ENDFOR»
				
				«FOR c : javaRequired»
				//mandatory field constraint
					if(«c».getText().equals("")){
						message += "Error: «c» must be filled!\n";
					}
				
				«ENDFOR»
				return message;
			}
			
			public static boolean validateInteger(String value) {
		        return value.matches("^[-]?[0-9]+$");
		    }
		    
		    public static boolean validateDouble(String value) {
		        return value.matches("^[-]?[0-9]+([.][0-9]+)?$");
		    }
		    //submit button field
			private JButton submitButton;
			//field for swing componenets
			«FOR String field: javaFields»
				private «field»;
			«ENDFOR»
		}'''
	
	def void addToJavaFields(String type, String name){
		javaFields.add(type+" "+name.replaceAll(" ", ""));
	}
	
	def void addToJavaRequired(String s){	
		javaRequired.add(s);
	}

	def String getFeatureJava(Feature f, String name)'''
		«val lname = name.toFirstLower.replaceAll(" ", "")»
		«IF (f != null)»
			«FOR feature : f.features»
				«val n = feature.name.replaceAll(" ", "")»
				«lname+n»Panel = createPanel("«feature.name»");
				«addToJavaFields("JPanel",lname+n+"Panel")»
				«IF (feature.type == SimpleType.BOOLEAN)»
					«IF feature.required == SolitaryType.OPTIONAL»
						 «lname+n»Option = new JCheckBox("«feature.name»");
					«lname+n»Panel.add(«lname+n»Option);
						 «addToJavaFields("JCheckBox", lname+n+"Option")»
					«ENDIF»
				«ELSEIF feature.required == SolitaryType.MANDATORY»
					«lname+n»Field = new JTextField();
					«lname+n»Panel.add(«lname+feature.name»Field);
					«addToJavaFields("JTextField", lname+n+"Field")»
					«addToJavaRequired(lname+n+"Field")»
				«ELSE»
					«lname+n»Field = new JTextField();
					«lname+n»Panel.add(«lname+n»Field);
					«addToJavaFields("JTextField", lname+n+"Field")»
				«ENDIF»
					«IF feature.type == SimpleType.INT»
				«lname+n»Field.setInputVerifier(intVerifier);
					«ELSEIF feature.type == SimpleType.DOUBLE»
				«lname+n»Field.setInputVerifier(doubleVerifier);
					«ENDIF»
				«getFeatureJava(feature, lname+feature.name)»
«««				getContentPane().add(«lname+feature.name»Panel);
				«name.toFirstLower»Panel.add(«lname+n»Panel);
			«ENDFOR»
			
			«FOR g : f.groups»
				«getGroupJavaCode(g, f, lname)»
				
			«ENDFOR»
		«ENDIF»
	'''
	
	def getGroupJavaCode(Group group, Feature f, String name)'''
		«IF (group != null)»
			«IF group.inclusive» ««« select any (inclusive)
				«FOR groupedFeature : group.groupedFeatures»
					«val gName = name+groupedFeature.name.toFirstUpper.replaceAll(" ", "")+"Option"»
					«gName» = new JCheckBox("«groupedFeature.name»");
					«name»Panel.add(«gName»);
					«addToJavaFields("JCheckBox", gName)»
					
				«ENDFOR»
			«ELSE»«««	select one (exclusive)
«name»Select = new JComboBox();
			«addToJavaFields("JComboBox", name+"Select")»
			«name»Select.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] {
					«getGroupedFeaturesNameList(group)»
			}));
			«name»Panel.add(«name»Select);
			
			«ENDIF»
		«ENDIF»
	'''
	
	def String getGroupedFeaturesNameList(Group g){
		var s = "";
		for (gf : g.groupedFeatures){
			s += "\""+gf.name+"\", "
		}
		return s.substring(0, s.length-2);
	}

	def String getVariableJavaCode(Expression ex, String name){
		if(ex instanceof BinaryOperation){
			val binOp = ex as BinaryOperation
			val ltype = getType(binOp.lexp)
			val rtype = getType(binOp.rexp)
//			(lexp op rexp)
			if ((binOp.operator == BinaryOperator.EQUALS) && (ltype == SimpleType.STRING && rtype == SimpleType.NULLTYPE)) {
				"("+getVariableJavaCode(binOp.lexp, name)+".isEmpty())"
			}else if ((binOp.operator == BinaryOperator.EQUALS) && (rtype == SimpleType.STRING && ltype == SimpleType.NULLTYPE)) {
				"("+getVariableJavaCode(binOp.rexp, name)+".isEmpty())"
			}else {
				"("+getVariableJavaCode(binOp.lexp, name)+" "+getBinaryOperator(binOp.operator, false)+" "+getVariableJavaCode(binOp.rexp, name)+")"
			}
		}else if(ex instanceof UnaryOperation){
			val e = ex as UnaryOperation
//			(op exp)
			"("+getUnaryOperator(e.operator)+getVariableJavaCode(e.exp, name)+")"
		}else if (ex instanceof Identifier){
			val id = ex as Identifier
			val ref = id.ref.get(id.ref.size - 1)
			val newName = concatJavaNames(id.ref)
			val text = name.toFirstLower+newName+"Field.getText()"
//			SOLITARY
			if (ref instanceof SolitaryFeature){
				val feat = ref as SolitaryFeature
				if (feat.type == SimpleType.BOOLEAN){
					if(feat.required == SolitaryType.MANDATORY) 
						"true"
					else{
						name.toFirstLower+newName+"Option.isSelected()"
					}
				}else if(feat.type == SimpleType.STRING){
//					return text+".equals(\""+ref.name+"\")"
					text
				}else if(feat.type == SimpleType.INT){
					"!"+text+".equals(\"\") && Integer.parseInt("+text+")"
				}else if(feat.type == SimpleType.DOUBLE){
					"!"+text+".equals(\"\") && Double.parseDouble("+text+")"
				}
			}else if(ref instanceof GroupedFeature){
					if(javaFields.contains("JCheckBox "+name.toFirstLower+newName+"Option")){
						name.toFirstLower+newName+"Option.isSelected()"
					}else{
						val variable = name.toFirstLower+newName.replace(ref.name, "")
						variable+"Select.getSelectedItem().equals(\""+ref.name+"\")"
					}
			}
		}else if(ex instanceof Number){
			val e = ex as Number
			""+e.value
		}
		else if(ex instanceof NULL){
			"null"
		}
	}
	
	def toHTML(Feature it)'''
		<!doctype html>
			<html>
				<head>
					<title>«it.name»:</title>
				</head>
				<body>
					<h1>«it.name»</h1>
					<form action="<?php echo $_SERVER['PHP_SELF'];?>" method="POST" onsubmit="return check()">
«««						feature code
						«getFeatureHTMLCode(it, it.name.toLowerCase)»<br>
						<input type="submit" name="form" value="Update">
					</form>
					
					<script>
						function check(){
							var message = "";
							«FOR c : constraints»
							//constraint
							if(!«getVariableHTMLCode(c, name.toLowerCase)»){
								message += "error: «getConstraintsText(c, name)»";
								message += "\n";
							}
«««							«getConstraintsHTMLCode(c, it.name.toLowerCase)»
							«ENDFOR»
							if( message != "" ){
								alert(message);
								return false;
							}else{
								return true;
							}
						}//END CHECK()
						
«««						HELPER JAVASCRIPT CODE
						function getS(id){
							var item = getItem(getID(id));
							if(item.type && (item.type === 'checkbox')){
								return item.checked;
							}else{
								return isItemSelected(id);
							}
						}
						
						function getChecked(id){
							return getItem(getID(id)).checked;
						}
						
						function isItemSelected(id){
							var dd = getDropDown(id);
							var item = getItem(getID(id));
							return dd.options[dd.selectedIndex].text === item.text;
						}
						
						function getItem(name){
							return document.getElementById(name);
						}
						
						function getDropDown(name){
							return document.getElementById(getDropDownID(name));
						}
						
						function getID(str){
							return str.toLowerCase().replace(/\./g,'');
						}
						
						function getDropDownID(str){
							var i = str.lastIndexOf(".");
							var sub = str.substring(0, i);
							return getID(sub);
						}
						
						function validateInteger(value) {
							var pattern = /^[-]?[0-9]+$/;
							if(!(pattern.test(value))){
								alert('input: expected Integer, but was '+value);
							}
						}
						
						function validateDouble(value) {
							var pattern = /^[-]?[0-9]+([.][0-9]+)?$/;
							if(!(pattern.test(value))){
								alert('input: expected Double, but was '+value);
							}
						}
						
						function isEmpty(str) {
							return (!str || 0 === str.length);
						}
												
					</script>
					<?php
						foreach($_POST as $k => $v) {
				        	echo "$k =";  
				        	if(is_array($v)) 
					        	foreach ($v as $value) {
					        		echo $value." ";
					        	}
					        else
					        	echo $v;
					        echo "<br>";
						}
					?>
				</body>
			</html>
	'''

	def String getFeatureHTMLCode(Feature f, String name)'''
		«val n = name.replaceAll(" ", "")»
		«IF (f != null)»
			«FOR feature : f.features»
				<fieldset>
				«IF (feature.type == SimpleType.BOOLEAN)»
					«IF feature.required == SolitaryType.OPTIONAL»
						<br> <input type="checkbox" id="«n»«feature.name.toLowerCase().replaceAll(" ", "")»" name="«f.name»"> «feature.name» <br>
					«ELSE»
						<legend>«feature.name»*</legend>
					«ENDIF»
				«ELSEIF feature.required == SolitaryType.MANDATORY»
					«feature.name»*: <input type="text" id="«n»«feature.name.toLowerCase.replaceAll(" ", "")»" name="«feature.name.toLowerCase»" «getHTMLInputValidation(feature)» required><br>
				«ELSE»
					«feature.name»: <input type="text" id="«n»«feature.name.toLowerCase.replaceAll(" ", "")»" name="«feature.name.toLowerCase»" «getHTMLInputValidation(feature)»><br>
				«ENDIF»
				«getFeatureHTMLCode(feature, n+feature.name.toLowerCase.replaceAll(" ", ""))»</fieldset>
			«ENDFOR»
			«FOR g : f.groups»
				«getGroupHTMLCode(g, f, n)»
			«ENDFOR»
			
		«ENDIF»
	'''
	
	def String getHTMLInputValidation(Feature f){
		if(f.type == SimpleType.INT)
			"onChange=\"validateInteger(value)\""
		else if(f.type == SimpleType.DOUBLE)
			"onChange=\"validateDouble(value)\""
		else
			""
	}
	
	def String getGroupHTMLCode(Group g, Feature f, String name)'''
		«IF (g != null)»
			«IF g.inclusive» ««« select any
				«FOR gf : g.groupedFeatures»
					<br> <input type="checkbox" id="«name»«gf.name.toLowerCase.replaceAll(" ", "")»" name="«f.name»[]" value="«gf.name»"> «gf.name» «getFeatureHTMLCode(gf, name+gf.name.toLowerCase)»
				«ENDFOR»
			«ELSE»«««	select one
<select id="«name»" name="«name»">
				«FOR gf : g.groupedFeatures»
				<br> <option id="«name»«gf.name.toLowerCase.replaceAll(" ", "")»" value="«gf.name.toLowerCase»" name="«name+gf.name.toLowerCase»">«gf.name»</option> «getFeatureHTMLCode(gf, name+gf.name.toLowerCase)»
				«ENDFOR»
</select><br>
			«ENDIF»
		«ENDIF»
	'''
	
	def String getBinaryOperator(BinaryOperator op, Boolean isHTML){
		if(op == BinaryOperator.AND)
			return "&&"
		else if(op == BinaryOperator.OR)
			return "||"
		else if(op == BinaryOperator.EQUALS)
			return if (isHTML) "===" else "=="
		else if(op == BinaryOperator.LOWER)
			return "<"
		else if(op == BinaryOperator.HIGHER)
			return ">"
	}
	
	def String getUnaryOperator(UnaryOperator op){
		if(op == UnaryOperator.NOT)
			return "!"
		else if(op == UnaryOperator.MINUS)
			return "-"
	}
	
	def String getVariableHTMLCode(Expression ex, String name){
		if(ex instanceof BinaryOperation){
			val binOp = ex as BinaryOperation
			val ltype = getType(binOp.lexp)
			val rtype = getType(binOp.rexp)
//			(lexp op rexp)
			if ((binOp.operator == BinaryOperator.EQUALS) && (ltype == SimpleType.STRING && rtype == SimpleType.NULLTYPE)) {
				"(isEmpty("+getVariableHTMLCode(binOp.lexp, name)+") )"
			}else if ((binOp.operator == BinaryOperator.EQUALS) && (rtype == SimpleType.STRING && ltype == SimpleType.NULLTYPE)) {
				"(isEmpty("+getVariableHTMLCode(binOp.rexp, name)+") )"
			}else {
				"("+getVariableHTMLCode(binOp.lexp, name)+" "+getBinaryOperator(binOp.operator, true)+" "+getVariableHTMLCode(binOp.rexp, name)+")"
			}
//			return "("+getVariableHTMLCode(e.lexp, name)+" "+getBinaryOperator(e.operator, true)+" "+getVariableHTMLCode(e.rexp, name)+")"
		}else if(ex instanceof UnaryOperation){
			val e = ex as UnaryOperation
//			(op exp)
			"("+getUnaryOperator(e.operator)+getVariableHTMLCode(e.exp, name)+")"
		}else if (ex instanceof Identifier){
			val id = ex as Identifier
			val ref = id.ref.get(id.ref.size - 1)
			val newName = concatHTMLNames(id.ref)
//			SOLITARY
			if (ref instanceof SolitaryFeature){
				val feat = ref as SolitaryFeature
				if (feat.type == SimpleType.BOOLEAN){
					if(feat.required == SolitaryType.MANDATORY) 
						"true"
					else{
						"getItem(getID(\""+name+"."+newName+"\")).checked"
					}
				}else{
					"getItem(getID(\""+name+"."+newName+"\")).value"
				}
			}else if(ref instanceof GroupedFeature){
				"getS(\""+name+"."+newName+"\")"
			}
		}else if(ex instanceof Number){
			val e = ex as Number
			""+e.value
		}
		else if(ex instanceof NULL){
			"null"
		}
	}
	
	def concatHTMLNames(EList<Feature> list) {
		var result = ""
		for(Feature f: list){
			result +=f.name+'.'
		}
		return result.substring(0, result.length-1)
	}
	
	def concatJavaNames(EList<Feature> list) {
		var result = ""
		for(Feature f: list){
			result +=f.name
		}
		return result
	}
	
	def String getConstraintsText(Expression c, String name){
		if(c instanceof BinaryOperation){
			val binOp = c as BinaryOperation
			getVariableText(binOp.lexp, name)+" "+getBinaryOperator(binOp.operator, false)+" "+getVariableText(binOp.rexp, name)
		}else if (c instanceof UnaryOperation){
			val unOp = c as UnaryOperation
			getUnaryOperator(unOp.operator)+getVariableText(unOp.exp, name)
		}else if(c instanceof Identifier){
			val id = c as Identifier
			if (id.ref.get(id.ref.size - 1).type == SimpleType.BOOLEAN){
				val i = id.ref.get(id.ref.size - 1) as SolitaryFeature
				if(i.required == SolitaryType.get("Mandatory"))	
					i.name
				else
					name+"."+i.name
			}
		}
	}
	
	def String getVariableText(Expression ex, String name){
		if(ex instanceof BinaryOperation){
			val e = ex as BinaryOperation
//			(lexp op rexp)
			"("+getVariableText(e.lexp, name)+" "+getBinaryOperator(e.operator, false)+" "+getVariableText(e.rexp, name)+")"
		}else if(ex instanceof UnaryOperation){
			val e = ex as UnaryOperation
//			(op exp)
			"("+getUnaryOperator(e.operator)+getVariableText(e.exp, name)+")"
		}else if (ex instanceof Identifier){
			val id = ex as Identifier
			val ref = id.ref.get(id.ref.size - 1)
			val newName = concatHTMLNames(id.ref)
//			SOLITARY
			if (ref instanceof SolitaryFeature){
				val feat = ref as SolitaryFeature
				if (feat.type == SimpleType.BOOLEAN){
					if(feat.required == SolitaryType.MANDATORY) 
						"true"
					else{
						name+"."+newName
					}
				}else{
					name+"."+newName
				}
			}else if(ref instanceof GroupedFeature){
				name+"."+newName
			}
		}else if(ex instanceof Number){
			val e = ex as Number
			""+e.value
		}
		else if(ex instanceof NULL){
			"null"
		}
	}
	
	def SimpleType getType(Expression e) {
	//Identifier
		if (e instanceof Identifier) {
			val id = e as Identifier
			id.ref.get(id.ref.size - 1).type
	//BinaryOperation
		}else if (e instanceof BinaryOperation) {
			val binOp = e as BinaryOperation
			val op = binOp.operator
			val ltype = getType(binOp.lexp)
			val rtype = getType(binOp.rexp)
			//must be same type
			if (ltype == rtype) {
				if (op == BinaryOperator.AND || op == BinaryOperator.OR) {
					if (ltype == SimpleType.BOOLEAN) {
						ltype
					} else if (rtype == SimpleType.BOOLEAN) {
						rtype
					} else {
						throw new Exception("invalid type, must be boolean with And or Or operator")
					}
				} else if (op == BinaryOperator.EQUALS || op == BinaryOperator.HIGHER || op == BinaryOperator.LOWER) {
					SimpleType.BOOLEAN
				
				}else if (	op == BinaryOperator.DIVIDE || op == BinaryOperator.MULTIPLY || op == BinaryOperator.ADD || op == BinaryOperator.SUBTRACT) {
					if (ltype == SimpleType.INT || ltype == SimpleType.DOUBLE) {
						ltype
					} else {
						throw new Exception("invalid type")
					}
				}
			} //END same type
			else if(ltype == SimpleType.NULLTYPE && rtype == SimpleType.STRING && op == BinaryOperator.EQUALS){
			//left type is null and right type is string
				SimpleType.BOOLEAN
			}
			else if(rtype == SimpleType.NULLTYPE && ltype == SimpleType.STRING && op == BinaryOperator.EQUALS){
			//left type is null and right type is string
				SimpleType.BOOLEAN
			}
			else if(ltype != rtype){
				throw new Exception("invalid type"+ltype+" "+rtype+" "+op)
				
			}else{
				throw new Exception("other type error")
			}

	//UnaryOperation
		} else if (e instanceof UnaryOperation) {
			val expression = e as UnaryOperation
			val eType = getType(expression.exp)
			val op = expression.operator
			if( (op == UnaryOperator.NOT && (eType == SimpleType.BOOLEAN))
					|| 
				(op == UnaryOperator.MINUS && (eType == SimpleType.INT || eType == SimpleType.DOUBLE)) ){
				eType
			}else{
				throw new Exception("invalid type")
			}

	//NULL
		} else if(e instanceof NULL){
			SimpleType.NULLTYPE
	//Number
		}else {
			SimpleType.INT
		}
	}
}
