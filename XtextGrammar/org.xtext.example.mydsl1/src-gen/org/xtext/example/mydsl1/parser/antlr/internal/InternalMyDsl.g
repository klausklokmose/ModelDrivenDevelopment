/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)	otherlv_1='Model' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getModelKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='Root' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getRootKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRootFeatureFeatureParserRuleCall_3_1_0()); 
	    }
		lv_RootFeature_4_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"RootFeature",
        		lv_RootFeature_4_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='Root' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRootKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRootFeatureFeatureParserRuleCall_3_2_1_0()); 
	    }
		lv_RootFeature_6_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"RootFeature",
        		lv_RootFeature_6_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getSolitaryFeatureParserRuleCall_0()); 
    }
    this_SolitaryFeature_0=ruleSolitaryFeature
    { 
        $current = $this_SolitaryFeature_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getGroupedFeatureParserRuleCall_1()); 
    }
    this_GroupedFeature_1=ruleGroupedFeature
    { 
        $current = $this_GroupedFeature_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBinaryOperationParserRuleCall_0()); 
    }
    this_BinaryOperation_0=ruleBinaryOperation
    { 
        $current = $this_BinaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getUnaryOperationParserRuleCall_1()); 
    }
    this_UnaryOperation_1=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNULLParserRuleCall_2()); 
    }
    this_NULL_2=ruleNULL
    { 
        $current = $this_NULL_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNumberParserRuleCall_3()); 
    }
    this_Number_3=ruleNumber
    { 
        $current = $this_Number_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIdentifierParserRuleCall_4()); 
    }
    this_Identifier_4=ruleIdentifier
    { 
        $current = $this_Identifier_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSolitaryFeature
entryRuleSolitaryFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSolitaryFeatureRule()); }
	 iv_ruleSolitaryFeature=ruleSolitaryFeature 
	 { $current=$iv_ruleSolitaryFeature.current; } 
	 EOF 
;

// Rule SolitaryFeature
ruleSolitaryFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='feature' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSolitaryFeatureAccess().getFeatureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getRequiredSolitaryTypeEnumRuleCall_1_0()); 
	    }
		lv_required_1_0=ruleSolitaryType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		set(
       			$current, 
       			"required",
        		lv_required_1_0, 
        		"SolitaryType");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSolitaryFeatureAccess().getEqualsSignGreaterThanSignKeyword_3_0_0());
    }
(	otherlv_4='type' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSolitaryFeatureAccess().getTypeKeyword_3_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getTypeSimpleTypeEnumRuleCall_3_0_1_1_0()); 
	    }
		lv_type_5_0=ruleSimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"SimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getGroupsGroupParserRuleCall_3_0_2_0_0()); 
	    }
		lv_groups_6_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_6_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getGroupsGroupParserRuleCall_3_0_2_1_0()); 
	    }
		lv_groups_7_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_7_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getFeaturesSolitaryFeatureParserRuleCall_3_0_3_0_0()); 
	    }
		lv_features_8_0=ruleSolitaryFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_8_0, 
        		"SolitaryFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getFeaturesSolitaryFeatureParserRuleCall_3_0_3_1_0()); 
	    }
		lv_features_9_0=ruleSolitaryFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_9_0, 
        		"SolitaryFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='#' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSolitaryFeatureAccess().getNumberSignKeyword_3_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getConstraintsExpressionParserRuleCall_3_0_4_1_0()); 
	    }
		lv_constraints_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSolitaryFeatureAccess().getCommaKeyword_3_0_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getConstraintsExpressionParserRuleCall_3_0_4_2_1_0()); 
	    }
		lv_constraints_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14='#' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSolitaryFeatureAccess().getNumberSignKeyword_3_0_4_3());
    }
)?	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getSolitaryFeatureAccess().getSemicolonKeyword_3_0_5());
    }
)
    |(	otherlv_16='=' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSolitaryFeatureAccess().getEqualsSignKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSolitaryFeatureAccess().getConstraintsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_constraints_17_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSolitaryFeatureRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_17_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_inclusive_0_0=	'any' 
    {
        newLeafNode(lv_inclusive_0_0, grammarAccess.getGroupAccess().getInclusiveAnyKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroupRule());
	        }
       		setWithLastConsumed($current, "inclusive", true, "any");
	    }

)
)?	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getGroupedFeaturesGroupedFeatureParserRuleCall_2_0()); 
	    }
		lv_groupedFeatures_2_0=ruleGroupedFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"groupedFeatures",
        		lv_groupedFeatures_2_0, 
        		"GroupedFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getGroupedFeaturesGroupedFeatureParserRuleCall_3_0()); 
	    }
		lv_groupedFeatures_3_0=ruleGroupedFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"groupedFeatures",
        		lv_groupedFeatures_3_0, 
        		"GroupedFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleGroupedFeature
entryRuleGroupedFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupedFeatureRule()); }
	 iv_ruleGroupedFeature=ruleGroupedFeature 
	 { $current=$iv_ruleGroupedFeature.current; } 
	 EOF 
;

// Rule GroupedFeature
ruleGroupedFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGroupedFeatureAccess().getGroupedFeatureAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupedFeatureAccess().getEqualsSignGreaterThanSignKeyword_2_0_0());
    }
(	otherlv_3='type' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupedFeatureAccess().getTypeKeyword_2_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getTypeSimpleTypeEnumRuleCall_2_0_1_1_0()); 
	    }
		lv_type_4_0=ruleSimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"SimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='groups' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupedFeatureAccess().getGroupsKeyword_2_0_2_0());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getGroupedFeatureAccess().getLeftCurlyBracketKeyword_2_0_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getGroupsGroupParserRuleCall_2_0_2_2_0()); 
	    }
		lv_groups_7_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_7_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGroupedFeatureAccess().getCommaKeyword_2_0_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getGroupsGroupParserRuleCall_2_0_2_3_1_0()); 
	    }
		lv_groups_9_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_9_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getGroupedFeatureAccess().getRightCurlyBracketKeyword_2_0_2_4());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getFeaturesSolitaryFeatureParserRuleCall_2_0_3_0_0()); 
	    }
		lv_features_11_0=ruleSolitaryFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_11_0, 
        		"SolitaryFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getGroupedFeatureAccess().getCommaKeyword_2_0_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getFeaturesSolitaryFeatureParserRuleCall_2_0_3_1_1_0()); 
	    }
		lv_features_13_0=ruleSolitaryFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_13_0, 
        		"SolitaryFeature");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(	otherlv_14='constraints' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getGroupedFeatureAccess().getConstraintsKeyword_2_0_4_0());
    }
	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getGroupedFeatureAccess().getLeftCurlyBracketKeyword_2_0_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getConstraintsExpressionParserRuleCall_2_0_4_2_0()); 
	    }
		lv_constraints_16_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_16_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_17=',' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getGroupedFeatureAccess().getCommaKeyword_2_0_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getConstraintsExpressionParserRuleCall_2_0_4_3_1_0()); 
	    }
		lv_constraints_18_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_18_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getGroupedFeatureAccess().getRightCurlyBracketKeyword_2_0_4_4());
    }
)?	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getGroupedFeatureAccess().getSemicolonKeyword_2_0_5());
    }
)
    |(	otherlv_21='=' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getGroupedFeatureAccess().getEqualsSignKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupedFeatureAccess().getConstraintsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_constraints_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupedFeatureRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_22_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleBinaryOperation
entryRuleBinaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperationRule()); }
	 iv_ruleBinaryOperation=ruleBinaryOperation 
	 { $current=$iv_ruleBinaryOperation.current; } 
	 EOF 
;

// Rule BinaryOperation
ruleBinaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BinaryOperation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryOperationAccess().getBinaryOperationKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinaryOperationAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='operator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBinaryOperationAccess().getOperatorKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperationAccess().getOperatorBinaryOperatorEnumRuleCall_3_0()); 
	    }
		lv_operator_3_0=ruleBinaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"BinaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='rexp' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinaryOperationAccess().getRexpKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperationAccess().getRexpExpressionParserRuleCall_5_0()); 
	    }
		lv_rexp_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperationRule());
	        }
       		set(
       			$current, 
       			"rexp",
        		lv_rexp_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='lexp' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBinaryOperationAccess().getLexpKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryOperationAccess().getLexpExpressionParserRuleCall_7_0()); 
	    }
		lv_lexp_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryOperationRule());
	        }
       		set(
       			$current, 
       			"lexp",
        		lv_lexp_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBinaryOperationAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='UnaryOperation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryOperationAccess().getUnaryOperationKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnaryOperationAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='operator' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryOperationAccess().getOperatorKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperatorUnaryOperatorEnumRuleCall_3_0()); 
	    }
		lv_operator_3_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='exp' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryOperationAccess().getExpKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getExpExpressionParserRuleCall_5_0()); 
	    }
		lv_exp_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryOperationAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleNULL
entryRuleNULL returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNULLRule()); }
	 iv_ruleNULL=ruleNULL 
	 { $current=$iv_ruleNULL.current; } 
	 EOF 
;

// Rule NULL
ruleNULL returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNULLAccess().getNULLAction_0(),
            $current);
    }
)	otherlv_1='NULL' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNULLAccess().getNULLKeyword_1());
    }
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberAccess().getValueEIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current; } 
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Identifier' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIdentifierAccess().getIdentifierKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIdentifierAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='ref' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIdentifierAccess().getRefKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentifierRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getIdentifierAccess().getRefFeatureCrossReference_4_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIdentifierAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;







// Rule BinaryOperator
ruleBinaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Equals' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getEqualsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOperatorAccess().getEqualsEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Higher' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getHigherEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOperatorAccess().getHigherEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Lower' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getLowerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryOperatorAccess().getLowerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='And' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getAndEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBinaryOperatorAccess().getAndEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Add' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getAddEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBinaryOperatorAccess().getAddEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Subtract' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getSubtractEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBinaryOperatorAccess().getSubtractEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Divide' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getDivideEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBinaryOperatorAccess().getDivideEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Multiply' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getMultiplyEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getBinaryOperatorAccess().getMultiplyEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Or' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getOrEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getBinaryOperatorAccess().getOrEnumLiteralDeclaration_8()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Not' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Minus' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule SimpleType
ruleSimpleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='boolean' 
	{
        $current = grammarAccess.getSimpleTypeAccess().getBooleanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSimpleTypeAccess().getBooleanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='int' 
	{
        $current = grammarAccess.getSimpleTypeAccess().getIntEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSimpleTypeAccess().getIntEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='double' 
	{
        $current = grammarAccess.getSimpleTypeAccess().getDoubleEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSimpleTypeAccess().getDoubleEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='String' 
	{
        $current = grammarAccess.getSimpleTypeAccess().getStringEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSimpleTypeAccess().getStringEnumLiteralDeclaration_3()); 
    }
));



// Rule SolitaryType
ruleSolitaryType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Optional' 
	{
        $current = grammarAccess.getSolitaryTypeAccess().getOptionalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSolitaryTypeAccess().getOptionalEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Mandatory' 
	{
        $current = grammarAccess.getSolitaryTypeAccess().getMandatoryEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSolitaryTypeAccess().getMandatoryEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


