// automatically generated by Xtext
grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.itu.dk/dijkstra/dk.itu.model.featuremodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	'{'
		('RootFeature' '{' RootFeature+=Feature ( "," RootFeature+=Feature)* '}' )?
	'}';

Feature returns Feature:
	SolitaryFeature | GroupedFeature;




Expression returns Expression:
	BinaryOperation | UnaryOperation | NULL | Number | Identifier;

Group returns Group:
	inclusive?='inclusive'
	'Group'
	'{'
		'groupedFeatures' '{' groupedFeatures+=GroupedFeature ( "," groupedFeatures+=GroupedFeature)* '}' 
	'}';

SolitaryFeature returns SolitaryFeature:
	'SolitaryFeature'
	name=EString
	'{'
		('type' type=SimpleType)?
		'required' required=SolitaryType
		('groups' '{' groups+=Group ( "," groups+=Group)* '}' )?
		('features' '{' features+=SolitaryFeature ( "," features+=SolitaryFeature)* '}' )?
		('constraints' '{' constraints+=Expression ( "," constraints+=Expression)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

enum SimpleType returns SimpleType:
				boolean = 'boolean' | int = 'int' | double = 'double' | String = 'String';

GroupedFeature returns GroupedFeature:
	{GroupedFeature}
	'GroupedFeature'
	name=EString
	'{'
		('type' type=SimpleType)?
		('groups' '{' groups+=Group ( "," groups+=Group)* '}' )?
		('features' '{' features+=SolitaryFeature ( "," features+=SolitaryFeature)* '}' )?
		('constraints' '{' constraints+=Expression ( "," constraints+=Expression)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum SolitaryType returns SolitaryType:
				Optional = 'Optional' | Mandatory = 'Mandatory';

BinaryOperation returns BinaryOperation:
	'BinaryOperation'
	'{'
		'operator' operator=BinaryOperator
		'rexp' rexp=Expression
		'lexp' lexp=Expression
	'}';

UnaryOperation returns UnaryOperation:
	'UnaryOperation'
	'{'
		'operator' operator=UnaryOperator
		'exp' exp=Expression
	'}';

NULL returns NULL:
	{NULL}
	'NULL'
	;

Number returns Number:
	'Number'
	'{'
		'value' value=EInt
	'}';

Identifier returns Identifier:
	'Identifier'
	name=EString
	'{'
		'ref' ref=[Feature|EString]
	'}';

enum BinaryOperator returns BinaryOperator:
				Equals = 'Equals' | Higher = 'Higher' | Lower = 'Lower' | And = 'And' | Add = 'Add' | Subtract = 'Subtract' | Divide = 'Divide' | Multiply = 'Multiply' | Or = 'Or';

enum UnaryOperator returns UnaryOperator:
				Not = 'Not' | Minus = 'Minus';

EInt returns ecore::EInt:
	'-'? INT;
