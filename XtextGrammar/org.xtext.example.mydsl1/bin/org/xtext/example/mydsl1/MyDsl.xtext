// automatically generated by Xtext
grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.itu.dk/dijkstra/dk.itu.model.featuremodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
	'Model'
	'{'
		('Root' RootFeature+=Feature ( 'Root' RootFeature+=Feature)* )?
	'}'
;

Feature returns Feature:
	SolitaryFeature | GroupedFeature;



SolitaryFeature returns SolitaryFeature:
	'feature'
	(required = SolitaryType)?
	name=EString
	(
	'=>'
		('type' type=SimpleType)?
			(features += SolitaryFeature ( features += SolitaryFeature)* )?
			//groups must be declared last
			(groups += Group ( groups+=Group)* )?

		('#' constraints+=Expression '#' ( '#' constraints += Expression '#' )* )?
	';'
	|
		'=' constraints+=Expression
	)?
;

EString returns ecore::EString:
	STRING | ID;

Group returns Group:
	
	'select'
	(inclusive?='any')?
		groupedFeatures+=GroupedFeature ( ',' groupedFeatures+=GroupedFeature)* 
	';'
;

GroupedFeature returns GroupedFeature:
	{GroupedFeature}
	name=EString
	(
	'=>'
		('type' type=SimpleType)?
			(groups += Group ( groups+=Group)* )?
			(features += SolitaryFeature ( features += SolitaryFeature)* )?
		('#' constraints+=Expression '#' ( '#' constraints += Expression '#' )* )?
	';'
	|
	'=' constraints+=Expression
	)?
;

Expression returns Expression:
	Logical2Operation
		(
			{BinaryOperation.lexp=current}
			operator=LogicalOperator
			rexp=Logical2Operation
		)*
;

Logical2Operation returns Expression:
	BinaryOperation
	(
		{BinaryOperation.lexp=current}
		operator=CompareOperator
		rexp=BinaryOperation
	)*
;

BinaryOperation returns Expression:
	AtomicExp
	(
		{BinaryOperation.lexp=current}
		operator=ArithmicOperator
		rexp=AtomicExp
	)*
;

UnaryOperation returns UnaryOperation:
	operator=UnaryOperator
	exp=AtomicExp
;

AtomicExp returns Expression:
	NULL | Number | Identifier | '(' Expression ')' | UnaryOperation | EBoolean
;


NULL returns NULL:
	{NULL}
	'NULL'
;

Number returns Number:
	value=EInt
;

Identifier returns Identifier:
	ref=[Feature|EString]
;

enum LogicalOperator returns BinaryOperator:
	And = 'And' | Or = 'Or'
;

enum CompareOperator returns BinaryOperator:
	Equals = 'Equals' | Higher = 'Higher' | Lower = 'Lower' 
;

enum ArithmicOperator returns BinaryOperator:
	Add = 'Add' | Subtract = 'Subtract' | Divide = 'Divide' | Multiply = 'Multiply' ;

enum UnaryOperator returns UnaryOperator:
	Not = 'Not' | Minus = 'Minus';

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum SimpleType returns SimpleType:
	boolean = 'boolean' | int = 'int' | double = 'double' | String = 'String';

enum SolitaryType returns SolitaryType:
	Optional = 'Optional' | Mandatory = 'Mandatory';