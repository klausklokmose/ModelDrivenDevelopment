/**
 * generated by Xtext
 */
package org.xtext.example.mydsl1.generator;

import com.google.common.base.Objects;
import featureModel.BinaryOperation;
import featureModel.BinaryOperator;
import featureModel.Expression;
import featureModel.Feature;
import featureModel.Group;
import featureModel.GroupedFeature;
import featureModel.Identifier;
import featureModel.Model;
import featureModel.NULL;
import featureModel.SimpleType;
import featureModel.SolitaryFeature;
import featureModel.SolitaryType;
import featureModel.UnaryOperation;
import featureModel.UnaryOperator;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class MyDslGenerator implements IGenerator {
  private final ArrayList<String> javaFields = new ArrayList<String>();
  
  private final ArrayList<String> javaRequired = new ArrayList<String>();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Model m = ((Model) _head);
    EList<Feature> _rootFeature = m.getRootFeature();
    for (final Feature root : _rootFeature) {
      {
        String _name = root.getName();
        String _plus = (_name + ".php");
        CharSequence _hTML = this.toHTML(root);
        fsa.generateFile(_plus, _hTML);
        String _name_1 = root.getName();
        String _plus_1 = (_name_1 + ".java");
        CharSequence _java = this.toJava(root);
        fsa.generateFile(_plus_1, _java);
      }
    }
  }
  
  public CharSequence toJava(final Feature it) {
    StringConcatenation _builder = new StringConcatenation();
    this.javaFields.clear();
    _builder.append("\t\t");
    this.javaRequired.clear();
    _builder.newLineIfNotEmpty();
    _builder.append("import java.awt.*;");
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import javax.swing.text.JTextComponent;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = it.getName();
    _builder.append(_name, "");
    _builder.append(" extends JFrame {");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ");
    String _name_1 = it.getName();
    _builder.append(_name_1, "    ");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("initComponents();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@SuppressWarnings(\"unchecked\")                        ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void initComponents() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("setTitle(\"");
    String _name_2 = it.getName();
    _builder.append(_name_2, "        ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("InputVerifier intVerifier = new InputVerifier() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public boolean verify(JComponent input) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("final JTextComponent source = (JTextComponent)input;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(!(source.getText().equals(\"\") || validateInteger(source.getText()))){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("JOptionPane.showMessageDialog(null, \"Error: must be an Integer\", \"Error Message\", JOptionPane.ERROR_MESSAGE);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("InputVerifier doubleVerifier = new InputVerifier() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public boolean verify(JComponent input) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("final JTextComponent source = (JTextComponent)input;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(!(source.getText().equals(\"\") || validateDouble(source.getText()))){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("JOptionPane.showMessageDialog(null, \"Error: must be Double\", \"Error Massage\", JOptionPane.ERROR_MESSAGE);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("//Features of the root feature");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_3 = it.getName();
    String _firstLower = StringExtensions.toFirstLower(_name_3);
    String _replaceAll = _firstLower.replaceAll(" ", "");
    _builder.append(_replaceAll, "\t\t");
    _builder.append("Panel = createPanel(\"");
    String _name_4 = it.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_5 = it.getName();
    String _firstLower_1 = StringExtensions.toFirstLower(_name_5);
    String _plus = (_firstLower_1 + "Panel");
    this.addToJavaFields("JPanel", _plus);
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_6 = it.getName();
    String _featureJava = this.getFeatureJava(it, _name_6);
    _builder.append(_featureJava, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("getContentPane().add(");
    String _name_7 = it.getName();
    String _firstLower_2 = StringExtensions.toFirstLower(_name_7);
    _builder.append(_firstLower_2, "\t\t");
    _builder.append("Panel);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JPanel submitPanel = new JPanel();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("submitPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("submitButton = new JButton();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("submitButton.setText(\"Submit\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("submitButton.addActionListener(new ActionListener() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public void actionPerformed(ActionEvent evt) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("submitButtonActionPerformed(evt);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JScrollPane scrollPane = new JScrollPane(");
    String _name_8 = it.getName();
    String _firstLower_3 = StringExtensions.toFirstLower(_name_8);
    _builder.append(_firstLower_3, "        ");
    _builder.append("Panel);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("getContentPane().add(scrollPane);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("submitPanel.add(submitButton);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("getContentPane().add(submitPanel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setMinimumSize(new Dimension(400, 700));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void submitButtonActionPerformed(ActionEvent evt) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// TODO add your handling code here:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String check = check();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(check.length() == 0){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String m = \"Congratulations!\\n\\nDetails of new ");
    String _name_9 = it.getName();
    _builder.append(_name_9, "\t\t\t");
    _builder.append(":\";");
    _builder.newLineIfNotEmpty();
    {
      for(final String c : this.javaFields) {
        _builder.append("\t\t\t");
        final String[] field = c.split(" ");
        _builder.newLineIfNotEmpty();
        {
          boolean _contains = c.contains("JTextField");
          if (_contains) {
            _builder.append("\t\t\t");
            _builder.append("m += \"\\n");
            String _get = field[1];
            String _trim = _get.trim();
            String[] _split = _trim.split("Field");
            String _get_1 = _split[0];
            _builder.append(_get_1, "\t\t\t");
            _builder.append(": \"+ ");
            String _get_2 = field[1];
            _builder.append(_get_2, "\t\t\t");
            _builder.append(".getText();");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _contains_1 = c.contains("JComboBox");
            if (_contains_1) {
              _builder.append("\t\t\t");
              _builder.append("m += \"\\n");
              String _get_3 = field[1];
              String _trim_1 = _get_3.trim();
              String[] _split_1 = _trim_1.split("Select");
              String _get_4 = _split_1[0];
              _builder.append(_get_4, "\t\t\t");
              _builder.append(": \"+ ");
              String _get_5 = field[1];
              _builder.append(_get_5, "\t\t\t");
              _builder.append(".getSelectedItem();");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _contains_2 = c.contains("JCheckBox");
              if (_contains_2) {
                _builder.append("\t\t\t");
                _builder.append("if(");
                String _get_6 = field[1];
                _builder.append(_get_6, "\t\t\t");
                _builder.append(".isSelected()){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("\t");
                _builder.append("m += \"\\n");
                String _get_7 = field[1];
                String _trim_2 = _get_7.trim();
                String[] _split_2 = _trim_2.split("Option");
                String _get_8 = _split_2[0];
                _builder.append(_get_8, "\t\t\t\t");
                _builder.append(": selected\";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("JTextArea ta = new JTextArea(30, 30);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ta.setText(m);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ta.setWrapStyleWord(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ta.setLineWrap(true);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ta.setCaretPosition(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ta.setEditable(false);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("JOptionPane.showMessageDialog(null, new JScrollPane(ta), \"RESULT\", JOptionPane.INFORMATION_MESSAGE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("JOptionPane.showMessageDialog(null, check);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}   ");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private JPanel createPanel(String title){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("JPanel resultPanel = new JPanel(); ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("resultPanel.setBorder(BorderFactory.createTitledBorder(title));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.Y_AXIS));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return resultPanel;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String args[]) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (\"Nimbus\".equals(info.getName())) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("javax.swing.UIManager.setLookAndFeel(info.getClassName());");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (Exception ex) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("java.util.logging.Logger.getLogger(");
    String _name_10 = it.getName();
    _builder.append(_name_10, "            ");
    _builder.append(".class.getName()).log(java.util.logging.Level.SEVERE, null, ex);");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("/* Create and display the form */");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("java.awt.EventQueue.invokeLater(new Runnable() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("new ");
    String _name_11 = it.getName();
    _builder.append(_name_11, "                ");
    _builder.append("().setVisible(true);");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String check() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String message = \"\";");
    _builder.newLine();
    {
      EList<Expression> _constraints = it.getConstraints();
      for(final Expression c_1 : _constraints) {
        _builder.append("\t\t");
        _builder.append("//constraint");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if(!");
        String _name_12 = it.getName();
        String _firstLower_4 = StringExtensions.toFirstLower(_name_12);
        String _variableJavaCode = this.getVariableJavaCode(c_1, _firstLower_4);
        _builder.append(_variableJavaCode, "\t\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("message += \"Error: ");
        String _name_13 = it.getName();
        String _constraintsText = this.getConstraintsText(c_1, _name_13);
        _builder.append(_constraintsText, "\t\t\t");
        _builder.append("\\n\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      for(final String c_2 : this.javaRequired) {
        _builder.append("\t\t");
        _builder.append("//mandatory field constraint");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if(");
        _builder.append(c_2, "\t\t\t");
        _builder.append(".getText().equals(\"\")){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("message += \"Error: ");
        _builder.append(c_2, "\t\t\t\t");
        _builder.append(" must be filled!\\n\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("return message;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static boolean validateInteger(String value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return value.matches(\"^[-]?[0-9]+$\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static boolean validateDouble(String value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return value.matches(\"^[-]?[0-9]+([.][0-9]+)?$\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//submit button field");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JButton submitButton;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//field for swing componenets");
    _builder.newLine();
    {
      for(final String field_1 : this.javaFields) {
        _builder.append("\t");
        _builder.append("private ");
        _builder.append(field_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    return _builder;
  }
  
  public void addToJavaFields(final String type, final String name) {
    String _replaceAll = name.replaceAll(" ", "");
    String _plus = ((type + " ") + _replaceAll);
    this.javaFields.add(_plus);
  }
  
  public void addToJavaRequired(final String s) {
    this.javaRequired.add(s);
  }
  
  public String getFeatureJava(final Feature f, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    String _firstLower = StringExtensions.toFirstLower(name);
    final String lname = _firstLower.replaceAll(" ", "");
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(f, null));
      if (_notEquals) {
        {
          EList<SolitaryFeature> _features = f.getFeatures();
          for(final SolitaryFeature feature : _features) {
            String _name = feature.getName();
            final String n = _name.replaceAll(" ", "");
            _builder.newLineIfNotEmpty();
            _builder.append((lname + n), "");
            _builder.append("Panel = createPanel(\"");
            String _name_1 = feature.getName();
            _builder.append(_name_1, "");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            this.addToJavaFields("JPanel", ((lname + n) + "Panel"));
            _builder.newLineIfNotEmpty();
            {
              SimpleType _type = feature.getType();
              boolean _equals = Objects.equal(_type, SimpleType.BOOLEAN);
              if (_equals) {
                {
                  SolitaryType _required = feature.getRequired();
                  boolean _equals_1 = Objects.equal(_required, SolitaryType.OPTIONAL);
                  if (_equals_1) {
                    _builder.append((lname + n), "");
                    _builder.append("Option = new JCheckBox(\"");
                    String _name_2 = feature.getName();
                    _builder.append(_name_2, "");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t\t\t");
                    _builder.append((lname + n), "\t\t\t\t\t");
                    _builder.append("Panel.add(");
                    _builder.append((lname + n), "\t\t\t\t\t");
                    _builder.append("Option);");
                    _builder.newLineIfNotEmpty();
                    this.addToJavaFields("JCheckBox", ((lname + n) + "Option"));
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                SolitaryType _required_1 = feature.getRequired();
                boolean _equals_2 = Objects.equal(_required_1, SolitaryType.MANDATORY);
                if (_equals_2) {
                  _builder.append((lname + n), "");
                  _builder.append("Field = new JTextField();");
                  _builder.newLineIfNotEmpty();
                  _builder.append((lname + n), "");
                  _builder.append("Panel.add(");
                  String _name_3 = feature.getName();
                  String _plus = (lname + _name_3);
                  _builder.append(_plus, "");
                  _builder.append("Field);");
                  _builder.newLineIfNotEmpty();
                  this.addToJavaFields("JTextField", ((lname + n) + "Field"));
                  _builder.newLineIfNotEmpty();
                  this.addToJavaRequired(((lname + n) + "Field"));
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append((lname + n), "");
                  _builder.append("Field = new JTextField();");
                  _builder.newLineIfNotEmpty();
                  _builder.append((lname + n), "");
                  _builder.append("Panel.add(");
                  _builder.append((lname + n), "");
                  _builder.append("Field);");
                  _builder.newLineIfNotEmpty();
                  this.addToJavaFields("JTextField", ((lname + n) + "Field"));
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            {
              SimpleType _type_1 = feature.getType();
              boolean _equals_3 = Objects.equal(_type_1, SimpleType.INT);
              if (_equals_3) {
                _builder.append((lname + n), "");
                _builder.append("Field.setInputVerifier(intVerifier);");
                _builder.newLineIfNotEmpty();
              } else {
                SimpleType _type_2 = feature.getType();
                boolean _equals_4 = Objects.equal(_type_2, SimpleType.DOUBLE);
                if (_equals_4) {
                  _builder.append((lname + n), "");
                  _builder.append("Field.setInputVerifier(doubleVerifier);");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            String _name_4 = feature.getName();
            String _plus_1 = (lname + _name_4);
            String _featureJava = this.getFeatureJava(feature, _plus_1);
            _builder.append(_featureJava, "");
            _builder.newLineIfNotEmpty();
            String _firstLower_1 = StringExtensions.toFirstLower(name);
            _builder.append(_firstLower_1, "");
            _builder.append("Panel.add(");
            _builder.append((lname + n), "");
            _builder.append("Panel);");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          EList<Group> _groups = f.getGroups();
          for(final Group g : _groups) {
            CharSequence _groupJavaCode = this.getGroupJavaCode(g, f, lname);
            _builder.append(_groupJavaCode, "");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence getGroupJavaCode(final Group group, final Feature f, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(group, null));
      if (_notEquals) {
        {
          boolean _isInclusive = group.isInclusive();
          if (_isInclusive) {
            {
              EList<GroupedFeature> _groupedFeatures = group.getGroupedFeatures();
              for(final GroupedFeature groupedFeature : _groupedFeatures) {
                String _name = groupedFeature.getName();
                String _firstUpper = StringExtensions.toFirstUpper(_name);
                String _replaceAll = _firstUpper.replaceAll(" ", "");
                String _plus = (name + _replaceAll);
                final String gName = (_plus + "Option");
                _builder.newLineIfNotEmpty();
                _builder.append(gName, "");
                _builder.append(" = new JCheckBox(\"");
                String _name_1 = groupedFeature.getName();
                _builder.append(_name_1, "");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append(name, "");
                _builder.append("Panel.add(");
                _builder.append(gName, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                this.addToJavaFields("JCheckBox", gName);
                _builder.newLineIfNotEmpty();
                _builder.newLine();
              }
            }
          } else {
            _builder.append(name, "");
            _builder.append("Select = new JComboBox();");
            _builder.newLineIfNotEmpty();
            this.addToJavaFields("JComboBox", (name + "Select"));
            _builder.newLineIfNotEmpty();
            _builder.append(name, "");
            _builder.append("Select.setModel(new javax.swing.DefaultComboBoxModel(");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("new String[] {");
            _builder.newLine();
            _builder.append("\t\t");
            String _groupedFeaturesNameList = this.getGroupedFeaturesNameList(group);
            _builder.append(_groupedFeaturesNameList, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("}));");
            _builder.newLine();
            _builder.append(name, "");
            _builder.append("Panel.add(");
            _builder.append(name, "");
            _builder.append("Select);");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public String getGroupedFeaturesNameList(final Group g) {
    String s = "";
    EList<GroupedFeature> _groupedFeatures = g.getGroupedFeatures();
    for (final GroupedFeature gf : _groupedFeatures) {
      String _s = s;
      String _name = gf.getName();
      String _plus = ("\"" + _name);
      String _plus_1 = (_plus + "\", ");
      s = (_s + _plus_1);
    }
    int _length = s.length();
    int _minus = (_length - 2);
    return s.substring(0, _minus);
  }
  
  public String getVariableJavaCode(final Expression ex, final String name) {
    String _xifexpression = null;
    if ((ex instanceof BinaryOperation)) {
      String _xblockexpression = null;
      {
        final BinaryOperation binOp = ((BinaryOperation) ex);
        Expression _lexp = binOp.getLexp();
        final SimpleType ltype = this.getType(_lexp);
        Expression _rexp = binOp.getRexp();
        final SimpleType rtype = this.getType(_rexp);
        String _xifexpression_1 = null;
        boolean _and = false;
        BinaryOperator _operator = binOp.getOperator();
        boolean _equals = Objects.equal(_operator, BinaryOperator.EQUALS);
        if (!_equals) {
          _and = false;
        } else {
          boolean _and_1 = false;
          boolean _equals_1 = Objects.equal(ltype, SimpleType.STRING);
          if (!_equals_1) {
            _and_1 = false;
          } else {
            boolean _equals_2 = Objects.equal(rtype, SimpleType.NULLTYPE);
            _and_1 = _equals_2;
          }
          _and = _and_1;
        }
        if (_and) {
          Expression _lexp_1 = binOp.getLexp();
          String _variableJavaCode = this.getVariableJavaCode(_lexp_1, name);
          String _plus = ("(" + _variableJavaCode);
          _xifexpression_1 = (_plus + ".isEmpty())");
        } else {
          String _xifexpression_2 = null;
          boolean _and_2 = false;
          BinaryOperator _operator_1 = binOp.getOperator();
          boolean _equals_3 = Objects.equal(_operator_1, BinaryOperator.EQUALS);
          if (!_equals_3) {
            _and_2 = false;
          } else {
            boolean _and_3 = false;
            boolean _equals_4 = Objects.equal(rtype, SimpleType.STRING);
            if (!_equals_4) {
              _and_3 = false;
            } else {
              boolean _equals_5 = Objects.equal(ltype, SimpleType.NULLTYPE);
              _and_3 = _equals_5;
            }
            _and_2 = _and_3;
          }
          if (_and_2) {
            Expression _rexp_1 = binOp.getRexp();
            String _variableJavaCode_1 = this.getVariableJavaCode(_rexp_1, name);
            String _plus_1 = ("(" + _variableJavaCode_1);
            _xifexpression_2 = (_plus_1 + ".isEmpty())");
          } else {
            Expression _lexp_2 = binOp.getLexp();
            String _variableJavaCode_2 = this.getVariableJavaCode(_lexp_2, name);
            String _plus_2 = ("(" + _variableJavaCode_2);
            String _plus_3 = (_plus_2 + " ");
            BinaryOperator _operator_2 = binOp.getOperator();
            String _binaryOperator = this.getBinaryOperator(_operator_2, Boolean.valueOf(false));
            String _plus_4 = (_plus_3 + _binaryOperator);
            String _plus_5 = (_plus_4 + " ");
            Expression _rexp_2 = binOp.getRexp();
            String _variableJavaCode_3 = this.getVariableJavaCode(_rexp_2, name);
            String _plus_6 = (_plus_5 + _variableJavaCode_3);
            _xifexpression_2 = (_plus_6 + ")");
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xifexpression_1 = null;
      if ((ex instanceof UnaryOperation)) {
        String _xblockexpression_1 = null;
        {
          final UnaryOperation e = ((UnaryOperation) ex);
          UnaryOperator _operator = e.getOperator();
          String _unaryOperator = this.getUnaryOperator(_operator);
          String _plus = ("(" + _unaryOperator);
          Expression _exp = e.getExp();
          String _variableJavaCode = this.getVariableJavaCode(_exp, name);
          String _plus_1 = (_plus + _variableJavaCode);
          _xblockexpression_1 = (_plus_1 + ")");
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        String _xifexpression_2 = null;
        if ((ex instanceof Identifier)) {
          String _xblockexpression_2 = null;
          {
            final Identifier id = ((Identifier) ex);
            EList<Feature> _ref = id.getRef();
            EList<Feature> _ref_1 = id.getRef();
            int _size = _ref_1.size();
            int _minus = (_size - 1);
            final Feature ref = _ref.get(_minus);
            EList<Feature> _ref_2 = id.getRef();
            final String newName = this.concatJavaNames(_ref_2);
            String _firstLower = StringExtensions.toFirstLower(name);
            String _plus = (_firstLower + newName);
            final String text = (_plus + "Field.getText()");
            String _xifexpression_3 = null;
            if ((ref instanceof SolitaryFeature)) {
              String _xblockexpression_3 = null;
              {
                final SolitaryFeature feat = ((SolitaryFeature) ref);
                String _xifexpression_4 = null;
                SimpleType _type = feat.getType();
                boolean _equals = Objects.equal(_type, SimpleType.BOOLEAN);
                if (_equals) {
                  String _xifexpression_5 = null;
                  SolitaryType _required = feat.getRequired();
                  boolean _equals_1 = Objects.equal(_required, SolitaryType.MANDATORY);
                  if (_equals_1) {
                    _xifexpression_5 = "true";
                  } else {
                    String _firstLower_1 = StringExtensions.toFirstLower(name);
                    String _plus_1 = (_firstLower_1 + newName);
                    _xifexpression_5 = (_plus_1 + "Option.isSelected()");
                  }
                  _xifexpression_4 = _xifexpression_5;
                } else {
                  String _xifexpression_6 = null;
                  SimpleType _type_1 = feat.getType();
                  boolean _equals_2 = Objects.equal(_type_1, SimpleType.STRING);
                  if (_equals_2) {
                    _xifexpression_6 = text;
                  } else {
                    String _xifexpression_7 = null;
                    SimpleType _type_2 = feat.getType();
                    boolean _equals_3 = Objects.equal(_type_2, SimpleType.INT);
                    if (_equals_3) {
                      _xifexpression_7 = (((("!" + text) + ".equals(\"\") && Integer.parseInt(") + text) + ")");
                    } else {
                      String _xifexpression_8 = null;
                      SimpleType _type_3 = feat.getType();
                      boolean _equals_4 = Objects.equal(_type_3, SimpleType.DOUBLE);
                      if (_equals_4) {
                        _xifexpression_8 = (((("!" + text) + ".equals(\"\") && Double.parseDouble(") + text) + ")");
                      }
                      _xifexpression_7 = _xifexpression_8;
                    }
                    _xifexpression_6 = _xifexpression_7;
                  }
                  _xifexpression_4 = _xifexpression_6;
                }
                _xblockexpression_3 = _xifexpression_4;
              }
              _xifexpression_3 = _xblockexpression_3;
            } else {
              String _xifexpression_4 = null;
              if ((ref instanceof GroupedFeature)) {
                String _xifexpression_5 = null;
                String _firstLower_1 = StringExtensions.toFirstLower(name);
                String _plus_1 = ("JCheckBox " + _firstLower_1);
                String _plus_2 = (_plus_1 + newName);
                String _plus_3 = (_plus_2 + "Option");
                boolean _contains = this.javaFields.contains(_plus_3);
                if (_contains) {
                  String _firstLower_2 = StringExtensions.toFirstLower(name);
                  String _plus_4 = (_firstLower_2 + newName);
                  _xifexpression_5 = (_plus_4 + "Option.isSelected()");
                } else {
                  String _xblockexpression_4 = null;
                  {
                    String _firstLower_3 = StringExtensions.toFirstLower(name);
                    String _name = ((GroupedFeature)ref).getName();
                    String _replace = newName.replace(_name, "");
                    final String variable = (_firstLower_3 + _replace);
                    String _name_1 = ((GroupedFeature)ref).getName();
                    String _plus_5 = ((variable + "Select.getSelectedItem().equals(\"") + _name_1);
                    _xblockexpression_4 = (_plus_5 + "\")");
                  }
                  _xifexpression_5 = _xblockexpression_4;
                }
                _xifexpression_4 = _xifexpression_5;
              }
              _xifexpression_3 = _xifexpression_4;
            }
            _xblockexpression_2 = _xifexpression_3;
          }
          _xifexpression_2 = _xblockexpression_2;
        } else {
          String _xifexpression_3 = null;
          if ((ex instanceof featureModel.Number)) {
            String _xblockexpression_3 = null;
            {
              final featureModel.Number e = ((featureModel.Number) ex);
              int _value = e.getValue();
              _xblockexpression_3 = ("" + Integer.valueOf(_value));
            }
            _xifexpression_3 = _xblockexpression_3;
          } else {
            String _xifexpression_4 = null;
            if ((ex instanceof NULL)) {
              _xifexpression_4 = "null";
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public CharSequence toHTML(final Feature it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!doctype html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<title>");
    String _name = it.getName();
    _builder.append(_name, "\t\t\t");
    _builder.append(":</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<h1>");
    String _name_1 = it.getName();
    _builder.append(_name_1, "\t\t\t");
    _builder.append("</h1>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("<form action=\"<?php echo $_SERVER[\'PHP_SELF\'];?>\" method=\"POST\" onsubmit=\"return check()\">");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    String _name_2 = it.getName();
    String _lowerCase = _name_2.toLowerCase();
    String _featureHTMLCode = this.getFeatureHTMLCode(it, _lowerCase);
    _builder.append(_featureHTMLCode, "\t\t\t\t");
    _builder.append("<br>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("<input type=\"submit\" name=\"form\" value=\"Update\">");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<script>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function check(){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var message = \"\";");
    _builder.newLine();
    {
      EList<Expression> _constraints = it.getConstraints();
      for(final Expression c : _constraints) {
        _builder.append("\t\t\t\t\t");
        _builder.append("//constraint");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("if(!");
        String _name_3 = it.getName();
        String _lowerCase_1 = _name_3.toLowerCase();
        String _variableHTMLCode = this.getVariableHTMLCode(c, _lowerCase_1);
        _builder.append(_variableHTMLCode, "\t\t\t\t\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("message += \"error: ");
        String _name_4 = it.getName();
        String _constraintsText = this.getConstraintsText(c, _name_4);
        _builder.append(_constraintsText, "\t\t\t\t\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        _builder.append("message += \"\\n\";");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t\t\t");
    _builder.append("if( message != \"\" ){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("alert(message);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}//END CHECK()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function getS(id){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var item = getItem(getID(id));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(item.type && (item.type === \'checkbox\')){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return item.checked;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return isItemSelected(id);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function getChecked(id){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return getItem(getID(id)).checked;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function isItemSelected(id){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var dd = getDropDown(id);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var item = getItem(getID(id));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return dd.options[dd.selectedIndex].text === item.text;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function getItem(name){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return document.getElementById(name);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function getDropDown(name){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return document.getElementById(getDropDownID(name));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function getID(str){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return str.toLowerCase().replace(/\\./g,\'\');");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function getDropDownID(str){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var i = str.lastIndexOf(\".\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var sub = str.substring(0, i);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return getID(sub);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function validateInteger(value) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var pattern = /^[-]?[0-9]+$/;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(!(pattern.test(value))){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("alert(\'input: expected Integer, but was \'+value);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function validateDouble(value) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("var pattern = /^[-]?[0-9]+([.][0-9]+)?$/;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(!(pattern.test(value))){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("alert(\'input: expected Double, but was \'+value);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("function isEmpty(str) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return (!str || 0 === str.length);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<?php");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("foreach($_POST as $k => $v) {");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("echo \"$k =\";  ");
    _builder.newLine();
    _builder.append("\t\t        \t");
    _builder.append("if(is_array($v)) ");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("foreach ($v as $value) {");
    _builder.newLine();
    _builder.append("\t\t\t        \t\t");
    _builder.append("echo $value.\" \";");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("echo $v;");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("echo \"<br>\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("?>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }
  
  public String getFeatureHTMLCode(final Feature f, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    final String n = name.replaceAll(" ", "");
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(f, null));
      if (_notEquals) {
        {
          EList<SolitaryFeature> _features = f.getFeatures();
          for(final SolitaryFeature feature : _features) {
            _builder.append("<fieldset>");
            _builder.newLine();
            {
              SimpleType _type = feature.getType();
              boolean _equals = Objects.equal(_type, SimpleType.BOOLEAN);
              if (_equals) {
                {
                  SolitaryType _required = feature.getRequired();
                  boolean _equals_1 = Objects.equal(_required, SolitaryType.OPTIONAL);
                  if (_equals_1) {
                    _builder.append("<br> <input type=\"checkbox\" id=\"");
                    _builder.append(n, "");
                    String _name = feature.getName();
                    String _lowerCase = _name.toLowerCase();
                    String _replaceAll = _lowerCase.replaceAll(" ", "");
                    _builder.append(_replaceAll, "");
                    _builder.append("\" name=\"");
                    String _name_1 = f.getName();
                    _builder.append(_name_1, "");
                    _builder.append("\"> ");
                    String _name_2 = feature.getName();
                    _builder.append(_name_2, "");
                    _builder.append(" <br>");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("<legend>");
                    String _name_3 = feature.getName();
                    _builder.append(_name_3, "");
                    _builder.append("*</legend>");
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                SolitaryType _required_1 = feature.getRequired();
                boolean _equals_2 = Objects.equal(_required_1, SolitaryType.MANDATORY);
                if (_equals_2) {
                  String _name_4 = feature.getName();
                  _builder.append(_name_4, "");
                  _builder.append("*: <input type=\"text\" id=\"");
                  _builder.append(n, "");
                  String _name_5 = feature.getName();
                  String _lowerCase_1 = _name_5.toLowerCase();
                  String _replaceAll_1 = _lowerCase_1.replaceAll(" ", "");
                  _builder.append(_replaceAll_1, "");
                  _builder.append("\" name=\"");
                  String _name_6 = feature.getName();
                  String _lowerCase_2 = _name_6.toLowerCase();
                  _builder.append(_lowerCase_2, "");
                  _builder.append("\" ");
                  String _hTMLInputValidation = this.getHTMLInputValidation(feature);
                  _builder.append(_hTMLInputValidation, "");
                  _builder.append(" required><br>");
                  _builder.newLineIfNotEmpty();
                } else {
                  String _name_7 = feature.getName();
                  _builder.append(_name_7, "");
                  _builder.append(": <input type=\"text\" id=\"");
                  _builder.append(n, "");
                  String _name_8 = feature.getName();
                  String _lowerCase_3 = _name_8.toLowerCase();
                  String _replaceAll_2 = _lowerCase_3.replaceAll(" ", "");
                  _builder.append(_replaceAll_2, "");
                  _builder.append("\" name=\"");
                  String _name_9 = feature.getName();
                  String _lowerCase_4 = _name_9.toLowerCase();
                  _builder.append(_lowerCase_4, "");
                  _builder.append("\" ");
                  String _hTMLInputValidation_1 = this.getHTMLInputValidation(feature);
                  _builder.append(_hTMLInputValidation_1, "");
                  _builder.append("><br>");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
            String _name_10 = feature.getName();
            String _lowerCase_5 = _name_10.toLowerCase();
            String _replaceAll_3 = _lowerCase_5.replaceAll(" ", "");
            String _plus = (n + _replaceAll_3);
            String _featureHTMLCode = this.getFeatureHTMLCode(feature, _plus);
            _builder.append(_featureHTMLCode, "");
            _builder.append("</fieldset>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Group> _groups = f.getGroups();
          for(final Group g : _groups) {
            String _groupHTMLCode = this.getGroupHTMLCode(g, f, n);
            _builder.append(_groupHTMLCode, "");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String getHTMLInputValidation(final Feature f) {
    String _xifexpression = null;
    SimpleType _type = f.getType();
    boolean _equals = Objects.equal(_type, SimpleType.INT);
    if (_equals) {
      _xifexpression = "onChange=\"validateInteger(value)\"";
    } else {
      String _xifexpression_1 = null;
      SimpleType _type_1 = f.getType();
      boolean _equals_1 = Objects.equal(_type_1, SimpleType.DOUBLE);
      if (_equals_1) {
        _xifexpression_1 = "onChange=\"validateDouble(value)\"";
      } else {
        _xifexpression_1 = "";
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String getGroupHTMLCode(final Group g, final Feature f, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(g, null));
      if (_notEquals) {
        {
          boolean _isInclusive = g.isInclusive();
          if (_isInclusive) {
            {
              EList<GroupedFeature> _groupedFeatures = g.getGroupedFeatures();
              for(final GroupedFeature gf : _groupedFeatures) {
                _builder.append("<br> <input type=\"checkbox\" id=\"");
                _builder.append(name, "");
                String _name = gf.getName();
                String _lowerCase = _name.toLowerCase();
                String _replaceAll = _lowerCase.replaceAll(" ", "");
                _builder.append(_replaceAll, "");
                _builder.append("\" name=\"");
                String _name_1 = f.getName();
                _builder.append(_name_1, "");
                _builder.append("[]\" value=\"");
                String _name_2 = gf.getName();
                _builder.append(_name_2, "");
                _builder.append("\"> ");
                String _name_3 = gf.getName();
                _builder.append(_name_3, "");
                _builder.append(" ");
                String _name_4 = gf.getName();
                String _lowerCase_1 = _name_4.toLowerCase();
                String _plus = (name + _lowerCase_1);
                String _featureHTMLCode = this.getFeatureHTMLCode(gf, _plus);
                _builder.append(_featureHTMLCode, "");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("<select id=\"");
            _builder.append(name, "");
            _builder.append("\" name=\"");
            _builder.append(name, "");
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            {
              EList<GroupedFeature> _groupedFeatures_1 = g.getGroupedFeatures();
              for(final GroupedFeature gf_1 : _groupedFeatures_1) {
                _builder.append("\t");
                _builder.append("<br> <option id=\"");
                _builder.append(name, "\t");
                String _name_5 = gf_1.getName();
                String _lowerCase_2 = _name_5.toLowerCase();
                String _replaceAll_1 = _lowerCase_2.replaceAll(" ", "");
                _builder.append(_replaceAll_1, "\t");
                _builder.append("\" value=\"");
                String _name_6 = gf_1.getName();
                String _lowerCase_3 = _name_6.toLowerCase();
                _builder.append(_lowerCase_3, "\t");
                _builder.append("\" name=\"");
                String _name_7 = gf_1.getName();
                String _lowerCase_4 = _name_7.toLowerCase();
                String _plus_1 = (name + _lowerCase_4);
                _builder.append(_plus_1, "\t");
                _builder.append("\">");
                String _name_8 = gf_1.getName();
                _builder.append(_name_8, "\t");
                _builder.append("</option> ");
                String _name_9 = gf_1.getName();
                String _lowerCase_5 = _name_9.toLowerCase();
                String _plus_2 = (name + _lowerCase_5);
                String _featureHTMLCode_1 = this.getFeatureHTMLCode(gf_1, _plus_2);
                _builder.append(_featureHTMLCode_1, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</select><br>");
            _builder.newLine();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String getBinaryOperator(final BinaryOperator op, final Boolean isHTML) {
    boolean _equals = Objects.equal(op, BinaryOperator.AND);
    if (_equals) {
      return "&&";
    } else {
      boolean _equals_1 = Objects.equal(op, BinaryOperator.OR);
      if (_equals_1) {
        return "||";
      } else {
        boolean _equals_2 = Objects.equal(op, BinaryOperator.EQUALS);
        if (_equals_2) {
          String _xifexpression = null;
          if ((isHTML).booleanValue()) {
            _xifexpression = "===";
          } else {
            _xifexpression = "==";
          }
          return _xifexpression;
        } else {
          boolean _equals_3 = Objects.equal(op, BinaryOperator.LOWER);
          if (_equals_3) {
            return "<";
          } else {
            boolean _equals_4 = Objects.equal(op, BinaryOperator.HIGHER);
            if (_equals_4) {
              return ">";
            }
          }
        }
      }
    }
    return null;
  }
  
  public String getUnaryOperator(final UnaryOperator op) {
    boolean _equals = Objects.equal(op, UnaryOperator.NOT);
    if (_equals) {
      return "!";
    } else {
      boolean _equals_1 = Objects.equal(op, UnaryOperator.MINUS);
      if (_equals_1) {
        return "-";
      }
    }
    return null;
  }
  
  public String getVariableHTMLCode(final Expression ex, final String name) {
    String _xifexpression = null;
    if ((ex instanceof BinaryOperation)) {
      String _xblockexpression = null;
      {
        final BinaryOperation binOp = ((BinaryOperation) ex);
        Expression _lexp = binOp.getLexp();
        final SimpleType ltype = this.getType(_lexp);
        Expression _rexp = binOp.getRexp();
        final SimpleType rtype = this.getType(_rexp);
        String _xifexpression_1 = null;
        boolean _and = false;
        BinaryOperator _operator = binOp.getOperator();
        boolean _equals = Objects.equal(_operator, BinaryOperator.EQUALS);
        if (!_equals) {
          _and = false;
        } else {
          boolean _and_1 = false;
          boolean _equals_1 = Objects.equal(ltype, SimpleType.STRING);
          if (!_equals_1) {
            _and_1 = false;
          } else {
            boolean _equals_2 = Objects.equal(rtype, SimpleType.NULLTYPE);
            _and_1 = _equals_2;
          }
          _and = _and_1;
        }
        if (_and) {
          Expression _lexp_1 = binOp.getLexp();
          String _variableHTMLCode = this.getVariableHTMLCode(_lexp_1, name);
          String _plus = ("(isEmpty(" + _variableHTMLCode);
          _xifexpression_1 = (_plus + ") )");
        } else {
          String _xifexpression_2 = null;
          boolean _and_2 = false;
          BinaryOperator _operator_1 = binOp.getOperator();
          boolean _equals_3 = Objects.equal(_operator_1, BinaryOperator.EQUALS);
          if (!_equals_3) {
            _and_2 = false;
          } else {
            boolean _and_3 = false;
            boolean _equals_4 = Objects.equal(rtype, SimpleType.STRING);
            if (!_equals_4) {
              _and_3 = false;
            } else {
              boolean _equals_5 = Objects.equal(ltype, SimpleType.NULLTYPE);
              _and_3 = _equals_5;
            }
            _and_2 = _and_3;
          }
          if (_and_2) {
            Expression _rexp_1 = binOp.getRexp();
            String _variableHTMLCode_1 = this.getVariableHTMLCode(_rexp_1, name);
            String _plus_1 = ("(isEmpty(" + _variableHTMLCode_1);
            _xifexpression_2 = (_plus_1 + ") )");
          } else {
            Expression _lexp_2 = binOp.getLexp();
            String _variableHTMLCode_2 = this.getVariableHTMLCode(_lexp_2, name);
            String _plus_2 = ("(" + _variableHTMLCode_2);
            String _plus_3 = (_plus_2 + " ");
            BinaryOperator _operator_2 = binOp.getOperator();
            String _binaryOperator = this.getBinaryOperator(_operator_2, Boolean.valueOf(true));
            String _plus_4 = (_plus_3 + _binaryOperator);
            String _plus_5 = (_plus_4 + " ");
            Expression _rexp_2 = binOp.getRexp();
            String _variableHTMLCode_3 = this.getVariableHTMLCode(_rexp_2, name);
            String _plus_6 = (_plus_5 + _variableHTMLCode_3);
            _xifexpression_2 = (_plus_6 + ")");
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xifexpression_1 = null;
      if ((ex instanceof UnaryOperation)) {
        String _xblockexpression_1 = null;
        {
          final UnaryOperation e = ((UnaryOperation) ex);
          UnaryOperator _operator = e.getOperator();
          String _unaryOperator = this.getUnaryOperator(_operator);
          String _plus = ("(" + _unaryOperator);
          Expression _exp = e.getExp();
          String _variableHTMLCode = this.getVariableHTMLCode(_exp, name);
          String _plus_1 = (_plus + _variableHTMLCode);
          _xblockexpression_1 = (_plus_1 + ")");
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        String _xifexpression_2 = null;
        if ((ex instanceof Identifier)) {
          String _xblockexpression_2 = null;
          {
            final Identifier id = ((Identifier) ex);
            EList<Feature> _ref = id.getRef();
            EList<Feature> _ref_1 = id.getRef();
            int _size = _ref_1.size();
            int _minus = (_size - 1);
            final Feature ref = _ref.get(_minus);
            EList<Feature> _ref_2 = id.getRef();
            final String newName = this.concatHTMLNames(_ref_2);
            String _xifexpression_3 = null;
            if ((ref instanceof SolitaryFeature)) {
              String _xblockexpression_3 = null;
              {
                final SolitaryFeature feat = ((SolitaryFeature) ref);
                String _xifexpression_4 = null;
                SimpleType _type = feat.getType();
                boolean _equals = Objects.equal(_type, SimpleType.BOOLEAN);
                if (_equals) {
                  String _xifexpression_5 = null;
                  SolitaryType _required = feat.getRequired();
                  boolean _equals_1 = Objects.equal(_required, SolitaryType.MANDATORY);
                  if (_equals_1) {
                    _xifexpression_5 = "true";
                  } else {
                    _xifexpression_5 = (((("getItem(getID(\"" + name) + ".") + newName) + "\")).checked");
                  }
                  _xifexpression_4 = _xifexpression_5;
                } else {
                  _xifexpression_4 = (((("getItem(getID(\"" + name) + ".") + newName) + "\")).value");
                }
                _xblockexpression_3 = _xifexpression_4;
              }
              _xifexpression_3 = _xblockexpression_3;
            } else {
              String _xifexpression_4 = null;
              if ((ref instanceof GroupedFeature)) {
                _xifexpression_4 = (((("getS(\"" + name) + ".") + newName) + "\")");
              }
              _xifexpression_3 = _xifexpression_4;
            }
            _xblockexpression_2 = _xifexpression_3;
          }
          _xifexpression_2 = _xblockexpression_2;
        } else {
          String _xifexpression_3 = null;
          if ((ex instanceof featureModel.Number)) {
            String _xblockexpression_3 = null;
            {
              final featureModel.Number e = ((featureModel.Number) ex);
              int _value = e.getValue();
              _xblockexpression_3 = ("" + Integer.valueOf(_value));
            }
            _xifexpression_3 = _xblockexpression_3;
          } else {
            String _xifexpression_4 = null;
            if ((ex instanceof NULL)) {
              _xifexpression_4 = "null";
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String concatHTMLNames(final EList<Feature> list) {
    String result = "";
    for (final Feature f : list) {
      String _result = result;
      String _name = f.getName();
      String _plus = (_name + ".");
      result = (_result + _plus);
    }
    int _length = result.length();
    int _minus = (_length - 1);
    return result.substring(0, _minus);
  }
  
  public String concatJavaNames(final EList<Feature> list) {
    String result = "";
    for (final Feature f : list) {
      String _result = result;
      String _name = f.getName();
      result = (_result + _name);
    }
    return result;
  }
  
  public String getConstraintsText(final Expression c, final String name) {
    String _xifexpression = null;
    if ((c instanceof BinaryOperation)) {
      String _xblockexpression = null;
      {
        final BinaryOperation binOp = ((BinaryOperation) c);
        Expression _lexp = binOp.getLexp();
        String _variableText = this.getVariableText(_lexp, name);
        String _plus = (_variableText + " ");
        BinaryOperator _operator = binOp.getOperator();
        String _binaryOperator = this.getBinaryOperator(_operator, Boolean.valueOf(false));
        String _plus_1 = (_plus + _binaryOperator);
        String _plus_2 = (_plus_1 + " ");
        Expression _rexp = binOp.getRexp();
        String _variableText_1 = this.getVariableText(_rexp, name);
        _xblockexpression = (_plus_2 + _variableText_1);
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xifexpression_1 = null;
      if ((c instanceof UnaryOperation)) {
        String _xblockexpression_1 = null;
        {
          final UnaryOperation unOp = ((UnaryOperation) c);
          UnaryOperator _operator = unOp.getOperator();
          String _unaryOperator = this.getUnaryOperator(_operator);
          Expression _exp = unOp.getExp();
          String _variableText = this.getVariableText(_exp, name);
          _xblockexpression_1 = (_unaryOperator + _variableText);
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        String _xifexpression_2 = null;
        if ((c instanceof Identifier)) {
          String _xblockexpression_2 = null;
          {
            final Identifier id = ((Identifier) c);
            String _xifexpression_3 = null;
            EList<Feature> _ref = id.getRef();
            EList<Feature> _ref_1 = id.getRef();
            int _size = _ref_1.size();
            int _minus = (_size - 1);
            Feature _get = _ref.get(_minus);
            SimpleType _type = _get.getType();
            boolean _equals = Objects.equal(_type, SimpleType.BOOLEAN);
            if (_equals) {
              String _xblockexpression_3 = null;
              {
                EList<Feature> _ref_2 = id.getRef();
                EList<Feature> _ref_3 = id.getRef();
                int _size_1 = _ref_3.size();
                int _minus_1 = (_size_1 - 1);
                Feature _get_1 = _ref_2.get(_minus_1);
                final SolitaryFeature i = ((SolitaryFeature) _get_1);
                String _xifexpression_4 = null;
                SolitaryType _required = i.getRequired();
                SolitaryType _get_2 = SolitaryType.get("Mandatory");
                boolean _equals_1 = Objects.equal(_required, _get_2);
                if (_equals_1) {
                  _xifexpression_4 = i.getName();
                } else {
                  String _name = i.getName();
                  _xifexpression_4 = ((name + ".") + _name);
                }
                _xblockexpression_3 = _xifexpression_4;
              }
              _xifexpression_3 = _xblockexpression_3;
            }
            _xblockexpression_2 = _xifexpression_3;
          }
          _xifexpression_2 = _xblockexpression_2;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public String getVariableText(final Expression ex, final String name) {
    String _xifexpression = null;
    if ((ex instanceof BinaryOperation)) {
      String _xblockexpression = null;
      {
        final BinaryOperation e = ((BinaryOperation) ex);
        Expression _lexp = e.getLexp();
        String _variableText = this.getVariableText(_lexp, name);
        String _plus = ("(" + _variableText);
        String _plus_1 = (_plus + " ");
        BinaryOperator _operator = e.getOperator();
        String _binaryOperator = this.getBinaryOperator(_operator, Boolean.valueOf(false));
        String _plus_2 = (_plus_1 + _binaryOperator);
        String _plus_3 = (_plus_2 + " ");
        Expression _rexp = e.getRexp();
        String _variableText_1 = this.getVariableText(_rexp, name);
        String _plus_4 = (_plus_3 + _variableText_1);
        _xblockexpression = (_plus_4 + ")");
      }
      _xifexpression = _xblockexpression;
    } else {
      String _xifexpression_1 = null;
      if ((ex instanceof UnaryOperation)) {
        String _xblockexpression_1 = null;
        {
          final UnaryOperation e = ((UnaryOperation) ex);
          UnaryOperator _operator = e.getOperator();
          String _unaryOperator = this.getUnaryOperator(_operator);
          String _plus = ("(" + _unaryOperator);
          Expression _exp = e.getExp();
          String _variableText = this.getVariableText(_exp, name);
          String _plus_1 = (_plus + _variableText);
          _xblockexpression_1 = (_plus_1 + ")");
        }
        _xifexpression_1 = _xblockexpression_1;
      } else {
        String _xifexpression_2 = null;
        if ((ex instanceof Identifier)) {
          String _xblockexpression_2 = null;
          {
            final Identifier id = ((Identifier) ex);
            EList<Feature> _ref = id.getRef();
            EList<Feature> _ref_1 = id.getRef();
            int _size = _ref_1.size();
            int _minus = (_size - 1);
            final Feature ref = _ref.get(_minus);
            EList<Feature> _ref_2 = id.getRef();
            final String newName = this.concatHTMLNames(_ref_2);
            String _xifexpression_3 = null;
            if ((ref instanceof SolitaryFeature)) {
              String _xblockexpression_3 = null;
              {
                final SolitaryFeature feat = ((SolitaryFeature) ref);
                String _xifexpression_4 = null;
                SimpleType _type = feat.getType();
                boolean _equals = Objects.equal(_type, SimpleType.BOOLEAN);
                if (_equals) {
                  String _xifexpression_5 = null;
                  SolitaryType _required = feat.getRequired();
                  boolean _equals_1 = Objects.equal(_required, SolitaryType.MANDATORY);
                  if (_equals_1) {
                    _xifexpression_5 = "true";
                  } else {
                    _xifexpression_5 = ((name + ".") + newName);
                  }
                  _xifexpression_4 = _xifexpression_5;
                } else {
                  _xifexpression_4 = ((name + ".") + newName);
                }
                _xblockexpression_3 = _xifexpression_4;
              }
              _xifexpression_3 = _xblockexpression_3;
            } else {
              String _xifexpression_4 = null;
              if ((ref instanceof GroupedFeature)) {
                _xifexpression_4 = ((name + ".") + newName);
              }
              _xifexpression_3 = _xifexpression_4;
            }
            _xblockexpression_2 = _xifexpression_3;
          }
          _xifexpression_2 = _xblockexpression_2;
        } else {
          String _xifexpression_3 = null;
          if ((ex instanceof featureModel.Number)) {
            String _xblockexpression_3 = null;
            {
              final featureModel.Number e = ((featureModel.Number) ex);
              int _value = e.getValue();
              _xblockexpression_3 = ("" + Integer.valueOf(_value));
            }
            _xifexpression_3 = _xblockexpression_3;
          } else {
            String _xifexpression_4 = null;
            if ((ex instanceof NULL)) {
              _xifexpression_4 = "null";
            }
            _xifexpression_3 = _xifexpression_4;
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  public SimpleType getType(final Expression e) {
    try {
      SimpleType _xifexpression = null;
      if ((e instanceof Identifier)) {
        SimpleType _xblockexpression = null;
        {
          final Identifier id = ((Identifier) e);
          EList<Feature> _ref = id.getRef();
          EList<Feature> _ref_1 = id.getRef();
          int _size = _ref_1.size();
          int _minus = (_size - 1);
          Feature _get = _ref.get(_minus);
          _xblockexpression = _get.getType();
        }
        _xifexpression = _xblockexpression;
      } else {
        SimpleType _xifexpression_1 = null;
        if ((e instanceof BinaryOperation)) {
          SimpleType _xblockexpression_1 = null;
          {
            final BinaryOperation binOp = ((BinaryOperation) e);
            final BinaryOperator op = binOp.getOperator();
            Expression _lexp = binOp.getLexp();
            final SimpleType ltype = this.getType(_lexp);
            Expression _rexp = binOp.getRexp();
            final SimpleType rtype = this.getType(_rexp);
            SimpleType _xifexpression_2 = null;
            boolean _equals = Objects.equal(ltype, rtype);
            if (_equals) {
              SimpleType _xifexpression_3 = null;
              boolean _or = false;
              boolean _equals_1 = Objects.equal(op, BinaryOperator.AND);
              if (_equals_1) {
                _or = true;
              } else {
                boolean _equals_2 = Objects.equal(op, BinaryOperator.OR);
                _or = _equals_2;
              }
              if (_or) {
                SimpleType _xifexpression_4 = null;
                boolean _equals_3 = Objects.equal(ltype, SimpleType.BOOLEAN);
                if (_equals_3) {
                  _xifexpression_4 = ltype;
                } else {
                  SimpleType _xifexpression_5 = null;
                  boolean _equals_4 = Objects.equal(rtype, SimpleType.BOOLEAN);
                  if (_equals_4) {
                    _xifexpression_5 = rtype;
                  } else {
                    throw new Exception("invalid type, must be boolean with And or Or operator");
                  }
                  _xifexpression_4 = _xifexpression_5;
                }
                _xifexpression_3 = _xifexpression_4;
              } else {
                SimpleType _xifexpression_6 = null;
                boolean _or_1 = false;
                boolean _or_2 = false;
                boolean _equals_5 = Objects.equal(op, BinaryOperator.EQUALS);
                if (_equals_5) {
                  _or_2 = true;
                } else {
                  boolean _equals_6 = Objects.equal(op, BinaryOperator.HIGHER);
                  _or_2 = _equals_6;
                }
                if (_or_2) {
                  _or_1 = true;
                } else {
                  boolean _equals_7 = Objects.equal(op, BinaryOperator.LOWER);
                  _or_1 = _equals_7;
                }
                if (_or_1) {
                  _xifexpression_6 = SimpleType.BOOLEAN;
                } else {
                  SimpleType _xifexpression_7 = null;
                  boolean _or_3 = false;
                  boolean _or_4 = false;
                  boolean _or_5 = false;
                  boolean _equals_8 = Objects.equal(op, BinaryOperator.DIVIDE);
                  if (_equals_8) {
                    _or_5 = true;
                  } else {
                    boolean _equals_9 = Objects.equal(op, BinaryOperator.MULTIPLY);
                    _or_5 = _equals_9;
                  }
                  if (_or_5) {
                    _or_4 = true;
                  } else {
                    boolean _equals_10 = Objects.equal(op, BinaryOperator.ADD);
                    _or_4 = _equals_10;
                  }
                  if (_or_4) {
                    _or_3 = true;
                  } else {
                    boolean _equals_11 = Objects.equal(op, BinaryOperator.SUBTRACT);
                    _or_3 = _equals_11;
                  }
                  if (_or_3) {
                    SimpleType _xifexpression_8 = null;
                    boolean _or_6 = false;
                    boolean _equals_12 = Objects.equal(ltype, SimpleType.INT);
                    if (_equals_12) {
                      _or_6 = true;
                    } else {
                      boolean _equals_13 = Objects.equal(ltype, SimpleType.DOUBLE);
                      _or_6 = _equals_13;
                    }
                    if (_or_6) {
                      _xifexpression_8 = ltype;
                    } else {
                      throw new Exception("invalid type");
                    }
                    _xifexpression_7 = _xifexpression_8;
                  }
                  _xifexpression_6 = _xifexpression_7;
                }
                _xifexpression_3 = _xifexpression_6;
              }
              _xifexpression_2 = _xifexpression_3;
            } else {
              SimpleType _xifexpression_9 = null;
              boolean _and = false;
              boolean _and_1 = false;
              boolean _equals_14 = Objects.equal(ltype, SimpleType.NULLTYPE);
              if (!_equals_14) {
                _and_1 = false;
              } else {
                boolean _equals_15 = Objects.equal(rtype, SimpleType.STRING);
                _and_1 = _equals_15;
              }
              if (!_and_1) {
                _and = false;
              } else {
                boolean _equals_16 = Objects.equal(op, BinaryOperator.EQUALS);
                _and = _equals_16;
              }
              if (_and) {
                _xifexpression_9 = SimpleType.BOOLEAN;
              } else {
                SimpleType _xifexpression_10 = null;
                boolean _and_2 = false;
                boolean _and_3 = false;
                boolean _equals_17 = Objects.equal(rtype, SimpleType.NULLTYPE);
                if (!_equals_17) {
                  _and_3 = false;
                } else {
                  boolean _equals_18 = Objects.equal(ltype, SimpleType.STRING);
                  _and_3 = _equals_18;
                }
                if (!_and_3) {
                  _and_2 = false;
                } else {
                  boolean _equals_19 = Objects.equal(op, BinaryOperator.EQUALS);
                  _and_2 = _equals_19;
                }
                if (_and_2) {
                  _xifexpression_10 = SimpleType.BOOLEAN;
                } else {
                  boolean _notEquals = (!Objects.equal(ltype, rtype));
                  if (_notEquals) {
                    throw new Exception(((((("invalid type" + ltype) + " ") + rtype) + " ") + op));
                  } else {
                    throw new Exception("other type error");
                  }
                }
                _xifexpression_9 = _xifexpression_10;
              }
              _xifexpression_2 = _xifexpression_9;
            }
            _xblockexpression_1 = _xifexpression_2;
          }
          _xifexpression_1 = _xblockexpression_1;
        } else {
          SimpleType _xifexpression_2 = null;
          if ((e instanceof UnaryOperation)) {
            SimpleType _xblockexpression_2 = null;
            {
              final UnaryOperation expression = ((UnaryOperation) e);
              Expression _exp = expression.getExp();
              final SimpleType eType = this.getType(_exp);
              final UnaryOperator op = expression.getOperator();
              SimpleType _xifexpression_3 = null;
              boolean _or = false;
              boolean _and = false;
              boolean _equals = Objects.equal(op, UnaryOperator.NOT);
              if (!_equals) {
                _and = false;
              } else {
                boolean _equals_1 = Objects.equal(eType, SimpleType.BOOLEAN);
                _and = _equals_1;
              }
              if (_and) {
                _or = true;
              } else {
                boolean _and_1 = false;
                boolean _equals_2 = Objects.equal(op, UnaryOperator.MINUS);
                if (!_equals_2) {
                  _and_1 = false;
                } else {
                  boolean _or_1 = false;
                  boolean _equals_3 = Objects.equal(eType, SimpleType.INT);
                  if (_equals_3) {
                    _or_1 = true;
                  } else {
                    boolean _equals_4 = Objects.equal(eType, SimpleType.DOUBLE);
                    _or_1 = _equals_4;
                  }
                  _and_1 = _or_1;
                }
                _or = _and_1;
              }
              if (_or) {
                _xifexpression_3 = eType;
              } else {
                throw new Exception("invalid type");
              }
              _xblockexpression_2 = _xifexpression_3;
            }
            _xifexpression_2 = _xblockexpression_2;
          } else {
            SimpleType _xifexpression_3 = null;
            if ((e instanceof NULL)) {
              _xifexpression_3 = SimpleType.NULLTYPE;
            } else {
              _xifexpression_3 = SimpleType.INT;
            }
            _xifexpression_2 = _xifexpression_3;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      return _xifexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
