/*
* generated by Xtext
*/
package org.xtext.example.mydsl1.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getAtomicExpAccess().getAlternatives(), "rule__AtomicExp__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getLogicalOperatorAccess().getAlternatives(), "rule__LogicalOperator__Alternatives");
					put(grammarAccess.getCompareOperatorAccess().getAlternatives(), "rule__CompareOperator__Alternatives");
					put(grammarAccess.getArithmicOperatorAccess().getAlternatives(), "rule__ArithmicOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
					put(grammarAccess.getSolitaryTypeAccess().getAlternatives(), "rule__SolitaryType__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getModelAccess().getGroup_3_2(), "rule__Model__Group_3_2__0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroup(), "rule__SolitaryFeature__Group__0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroup_4(), "rule__SolitaryFeature__Group_4__0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroup_4_1(), "rule__SolitaryFeature__Group_4_1__0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroup_4_2(), "rule__SolitaryFeature__Group_4_2__0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroup_4_3(), "rule__SolitaryFeature__Group_4_3__0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroup_4_3_2(), "rule__SolitaryFeature__Group_4_3_2__0");
					put(grammarAccess.getGroupAccess().getGroup(), "rule__Group__Group__0");
					put(grammarAccess.getGroupAccess().getGroup_4(), "rule__Group__Group_4__0");
					put(grammarAccess.getGroupedFeatureAccess().getGroup(), "rule__GroupedFeature__Group__0");
					put(grammarAccess.getGroupedFeatureAccess().getGroup_3(), "rule__GroupedFeature__Group_3__0");
					put(grammarAccess.getGroupedFeatureAccess().getGroup_3_1(), "rule__GroupedFeature__Group_3_1__0");
					put(grammarAccess.getGroupedFeatureAccess().getGroup_3_2(), "rule__GroupedFeature__Group_3_2__0");
					put(grammarAccess.getGroupedFeatureAccess().getGroup_3_3(), "rule__GroupedFeature__Group_3_3__0");
					put(grammarAccess.getGroupedFeatureAccess().getGroup_3_3_2(), "rule__GroupedFeature__Group_3_3_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getLogical2OperationAccess().getGroup(), "rule__Logical2Operation__Group__0");
					put(grammarAccess.getLogical2OperationAccess().getGroup_1(), "rule__Logical2Operation__Group_1__0");
					put(grammarAccess.getBinaryOperationAccess().getGroup(), "rule__BinaryOperation__Group__0");
					put(grammarAccess.getBinaryOperationAccess().getGroup_1(), "rule__BinaryOperation__Group_1__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup(), "rule__UnaryOperation__Group__0");
					put(grammarAccess.getAtomicExpAccess().getGroup_3(), "rule__AtomicExp__Group_3__0");
					put(grammarAccess.getIdentifierAccess().getGroup(), "rule__Identifier__Group__0");
					put(grammarAccess.getIdentifierAccess().getGroup_1(), "rule__Identifier__Group_1__0");
					put(grammarAccess.getNULLAccess().getGroup(), "rule__NULL__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getModelAccess().getRootFeatureAssignment_3_1(), "rule__Model__RootFeatureAssignment_3_1");
					put(grammarAccess.getModelAccess().getRootFeatureAssignment_3_2_1(), "rule__Model__RootFeatureAssignment_3_2_1");
					put(grammarAccess.getSolitaryFeatureAccess().getRequiredAssignment_1(), "rule__SolitaryFeature__RequiredAssignment_1");
					put(grammarAccess.getSolitaryFeatureAccess().getTypeAssignment_2(), "rule__SolitaryFeature__TypeAssignment_2");
					put(grammarAccess.getSolitaryFeatureAccess().getNameAssignment_3(), "rule__SolitaryFeature__NameAssignment_3");
					put(grammarAccess.getSolitaryFeatureAccess().getFeaturesAssignment_4_1_0(), "rule__SolitaryFeature__FeaturesAssignment_4_1_0");
					put(grammarAccess.getSolitaryFeatureAccess().getFeaturesAssignment_4_1_1(), "rule__SolitaryFeature__FeaturesAssignment_4_1_1");
					put(grammarAccess.getSolitaryFeatureAccess().getGroupsAssignment_4_2_0(), "rule__SolitaryFeature__GroupsAssignment_4_2_0");
					put(grammarAccess.getSolitaryFeatureAccess().getGroupsAssignment_4_2_1(), "rule__SolitaryFeature__GroupsAssignment_4_2_1");
					put(grammarAccess.getSolitaryFeatureAccess().getConstraintsAssignment_4_3_1(), "rule__SolitaryFeature__ConstraintsAssignment_4_3_1");
					put(grammarAccess.getSolitaryFeatureAccess().getConstraintsAssignment_4_3_2_1(), "rule__SolitaryFeature__ConstraintsAssignment_4_3_2_1");
					put(grammarAccess.getGroupAccess().getInclusiveAssignment_1(), "rule__Group__InclusiveAssignment_1");
					put(grammarAccess.getGroupAccess().getGroupedFeaturesAssignment_3(), "rule__Group__GroupedFeaturesAssignment_3");
					put(grammarAccess.getGroupAccess().getGroupedFeaturesAssignment_4_1(), "rule__Group__GroupedFeaturesAssignment_4_1");
					put(grammarAccess.getGroupedFeatureAccess().getTypeAssignment_1(), "rule__GroupedFeature__TypeAssignment_1");
					put(grammarAccess.getGroupedFeatureAccess().getNameAssignment_2(), "rule__GroupedFeature__NameAssignment_2");
					put(grammarAccess.getGroupedFeatureAccess().getGroupsAssignment_3_1_0(), "rule__GroupedFeature__GroupsAssignment_3_1_0");
					put(grammarAccess.getGroupedFeatureAccess().getGroupsAssignment_3_1_1(), "rule__GroupedFeature__GroupsAssignment_3_1_1");
					put(grammarAccess.getGroupedFeatureAccess().getFeaturesAssignment_3_2_0(), "rule__GroupedFeature__FeaturesAssignment_3_2_0");
					put(grammarAccess.getGroupedFeatureAccess().getFeaturesAssignment_3_2_1(), "rule__GroupedFeature__FeaturesAssignment_3_2_1");
					put(grammarAccess.getGroupedFeatureAccess().getConstraintsAssignment_3_3_1(), "rule__GroupedFeature__ConstraintsAssignment_3_3_1");
					put(grammarAccess.getGroupedFeatureAccess().getConstraintsAssignment_3_3_2_1(), "rule__GroupedFeature__ConstraintsAssignment_3_3_2_1");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1(), "rule__Expression__OperatorAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRexpAssignment_1_2(), "rule__Expression__RexpAssignment_1_2");
					put(grammarAccess.getLogical2OperationAccess().getOperatorAssignment_1_1(), "rule__Logical2Operation__OperatorAssignment_1_1");
					put(grammarAccess.getLogical2OperationAccess().getRexpAssignment_1_2(), "rule__Logical2Operation__RexpAssignment_1_2");
					put(grammarAccess.getBinaryOperationAccess().getOperatorAssignment_1_1(), "rule__BinaryOperation__OperatorAssignment_1_1");
					put(grammarAccess.getBinaryOperationAccess().getRexpAssignment_1_2(), "rule__BinaryOperation__RexpAssignment_1_2");
					put(grammarAccess.getUnaryOperationAccess().getOperatorAssignment_0(), "rule__UnaryOperation__OperatorAssignment_0");
					put(grammarAccess.getUnaryOperationAccess().getExpAssignment_1(), "rule__UnaryOperation__ExpAssignment_1");
					put(grammarAccess.getIdentifierAccess().getRefAssignment_0(), "rule__Identifier__RefAssignment_0");
					put(grammarAccess.getIdentifierAccess().getRefAssignment_1_1(), "rule__Identifier__RefAssignment_1_1");
					put(grammarAccess.getNumberAccess().getValueAssignment(), "rule__Number__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
